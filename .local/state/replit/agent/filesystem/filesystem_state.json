{"file_contents":{"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"design_guidelines.md":{"content":"# Design Guidelines: Replit-lite Web IDE\n\n## Design Approach\n\n**Selected Approach**: Design System - Drawing from VS Code, Linear, and Replit's design patterns\n**Justification**: This is a productivity-focused development tool where clarity, efficiency, and visual hierarchy are paramount. The interface must support complex workflows with multiple panels while maintaining focus and reducing cognitive load.\n\n**Core Design Principles**:\n- **Clarity over decoration**: Every visual element serves a functional purpose\n- **Dark-first design**: Reduce eye strain for extended coding sessions\n- **Spatial hierarchy**: Clear zones for different functionalities\n- **Information density**: Maximize useful content without clutter\n- **Professional consistency**: Familiar patterns for developer tools\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode (Primary)**:\n- Background Primary: `222 15% 10%` (deep slate, main editor area)\n- Background Secondary: `222 15% 8%` (sidebar, file tree)\n- Background Tertiary: `222 15% 14%` (panels, terminal)\n- Border Subtle: `222 10% 20%` (dividers, panel edges)\n- Border Interactive: `222 10% 30%` (hover states, focus rings)\n\n**Accent & Semantic Colors**:\n- Primary Action: `217 91% 60%` (vibrant blue for CTAs, links)\n- Success: `142 76% 36%` (terminal success, deployment complete)\n- Warning: `38 92% 50%` (build warnings)\n- Error: `0 84% 60%` (errors, failed deploys)\n- AI Accent: `271 76% 53%` (purple for AI features)\n\n**Text Colors**:\n- Primary Text: `210 20% 98%` (main content)\n- Secondary Text: `215 16% 65%` (labels, metadata)\n- Muted Text: `215 14% 45%` (placeholders, disabled states)\n\n**Light Mode (Optional)**:\n- Background: `210 20% 98%`\n- Text: `222 15% 10%`\n- Borders: `220 13% 85%`\n\n### B. Typography\n\n**Font Families**:\n- UI: 'Inter', system-ui, sans-serif (clean, modern interface text)\n- Code: 'JetBrains Mono', 'Fira Code', monospace (editor, terminal)\n- Display: 'Inter', -apple-system, sans-serif (headings, emphasis)\n\n**Type Scale**:\n- Display (Dashboard headings): 32px/40px, font-weight 700\n- H1 (Panel titles): 20px/28px, font-weight 600\n- H2 (Section headers): 16px/24px, font-weight 600\n- Body (Main UI text): 14px/20px, font-weight 400\n- Small (Metadata, labels): 12px/16px, font-weight 500\n- Code (Editor, terminal): 14px/20px, font-weight 400\n\n**Text Treatments**:\n- File paths and identifiers: Monospace, secondary color\n- Status indicators: Uppercase, 11px, letter-spacing 0.5px, font-weight 600\n- Error messages: Regular weight, error color with subtle background\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units of **2, 3, 4, 6, 8, 12** consistently\n- Micro spacing (icons, badges): `p-2`, `gap-2`\n- Component padding: `p-4`, `px-6 py-3`\n- Section spacing: `p-6`, `gap-6`\n- Panel separation: `p-8`, `gap-8`\n- Page margins: `p-12`\n\n**Grid System**:\n- Dashboard: 12-column grid with `gap-6` for project cards\n- Editor Layout: CSS Grid with named areas (sidebar | editor | ai-panel) and (terminal)\n- Responsive: Collapse AI panel below 1280px, stack terminal at 768px\n\n**Container Widths**:\n- Dashboard max-width: `max-w-7xl` (1280px)\n- Full-bleed editor: 100vw/vh with panel constraints\n- Modals/Dialogs: `max-w-2xl` (672px)\n\n### D. Component Library\n\n**Navigation & Chrome**:\n- Top Bar: h-14, background-secondary, border-b border-subtle, contains logo, project switcher, user menu\n- Sidebar: w-64, background-secondary, resizable with drag handle (min: 200px, max: 400px)\n- Tab Bar: h-10, background-tertiary, for open files with close icons\n- Status Bar: h-6, background-primary, border-t border-subtle, shows runtime info\n\n**Core UI Elements**:\n- Buttons Primary: bg-primary-action, text-white, px-4 py-2, rounded-md, font-medium\n- Buttons Secondary: border border-interactive, bg-transparent, hover:bg-tertiary\n- Icon Buttons: p-2, rounded-md, hover:bg-tertiary, transition-colors\n- Input Fields: bg-tertiary, border border-subtle, focus:border-primary, px-3 py-2, rounded-md\n- Dropdown Menus: bg-tertiary, border border-subtle, shadow-xl, rounded-lg, p-2\n\n**File Tree Component**:\n- Nested indent: pl-4 per level\n- File/folder items: h-8, px-2, rounded-sm, hover:bg-tertiary, cursor-pointer\n- Icons: 16px (heroicons), text-secondary, mr-2\n- Active file: bg-primary-action/10, border-l-2 border-primary-action\n\n**Terminal Component**:\n- xterm.js with custom theme matching dark palette\n- Prompt color: text-ai-accent (purple for AI, green for success commands)\n- Background: bg-tertiary with subtle texture (optional: `bg-[url('/noise.png')]` at 3% opacity)\n- Toolbar: bg-secondary, border-b border-subtle, with clear/kill session controls\n\n**AI Panel**:\n- Width: 400px (resizable, min: 320px, max: 600px)\n- Header: Model selector dropdown, \"Explain/Refactor/Generate\" tabs\n- Chat interface: Message bubbles with user (bg-primary-action/10) and AI (bg-ai-accent/10)\n- Action buttons: \"Apply Patch\" (primary), \"Copy\" (secondary), \"Regenerate\" (ghost)\n\n**Preview Frame**:\n- Border: 1px border-subtle with subtle shadow\n- Toolbar: bg-secondary with URL display (read-only input) and refresh/open-external buttons\n- Loading state: Skeleton with pulse animation\n- Error state: Centered message with retry button\n\n**Data Displays**:\n- Project Cards (Dashboard): bg-tertiary, border border-subtle, rounded-lg, p-6, hover:border-interactive, transition-all\n- Stat Counters: Large number (text-2xl font-bold) with small label below (text-sm text-secondary)\n- Template Cards: Icon (48px), title (text-lg font-semibold), description (text-sm text-secondary)\n\n**Modals & Overlays**:\n- Backdrop: bg-black/60 backdrop-blur-sm\n- Dialog: bg-secondary, border border-subtle, rounded-xl, shadow-2xl, max-w-2xl\n- Modal header: pb-4 border-b border-subtle, text-xl font-semibold\n- Modal actions: pt-4 border-t border-subtle, flex gap-3 justify-end\n\n### E. Interactions & Animations\n\n**Minimal Animation Strategy**:\n- Transitions: Use `transition-colors duration-150` for interactive states only\n- Panel resize: Smooth width transition (duration-200)\n- Tab switching: Instant (no animation to avoid lag perception)\n- Loading states: Subtle pulse on skeleton screens\n\n**Focus & Hover States**:\n- Focus rings: `ring-2 ring-primary-action ring-offset-2 ring-offset-background-primary`\n- Hover backgrounds: `hover:bg-tertiary` for interactive items\n- Active states: `active:scale-[0.98]` for buttons (subtle press effect)\n\n---\n\n## Page-Specific Layouts\n\n### Dashboard (`/`)\n- Hero Section: **No hero image** - immediate utility focus\n- Header: Logo left, \"New Project\" button right (primary action), user avatar far right\n- Project Grid: 3-column grid (lg:grid-cols-3 md:grid-cols-2 grid-cols-1), gap-6\n- Each card: Template icon, project name, last edited timestamp, quick actions (Open, Delete)\n- Empty state: Centered icon (96px), \"Create your first project\" message, template selection cards below\n\n### Editor View (`/p/[id]`)\n- Layout: CSS Grid with 4 zones\n  ```\n  [header        header      header  ]\n  [sidebar       editor      ai-panel]\n  [sidebar       terminal    ai-panel]\n  ```\n- Sidebar: File tree, project settings (collapsible sections)\n- Editor: Monaco with tab bar, minimap (optional toggle), breadcrumb path\n- AI Panel: Chat interface, model selector, context toggle (include current file)\n- Terminal: xterm.js with toolbar (new terminal, split, clear, kill)\n- Top toolbar: Install/Dev/Build/Deploy buttons, preview toggle, settings\n\n### Preview (`/p/[id]/preview`)\n- Iframe sandbox with toolbar\n- Responsive viewport simulator (optional): Device presets (mobile/tablet/desktop toggle)\n- External open button and refresh control\n\n---\n\n## Accessibility & Quality\n\n- **Keyboard Navigation**: All panels accessible via Cmd/Ctrl+1/2/3/4, Cmd+P for file switcher\n- **Color Contrast**: WCAG AA minimum (4.5:1 for text, 3:1 for UI components)\n- **Focus Management**: Clear focus indicators, logical tab order through panels\n- **Screen Reader**: Aria labels for all icon buttons, live regions for terminal output and AI responses\n- **Dark Mode Consistency**: Apply dark theme to Monaco editor, xterm.js, and all custom inputs\n\n---\n\n## Images & Visual Assets\n\n**Icon Library**: Heroicons (outline for UI, solid for emphasis)\n\n**No Hero Images**: This is a utility application - visual space prioritizes functional content\n\n**Illustrations** (Optional, Low Priority):\n- Empty states: Simple line art icons (file icon, terminal icon) at 96px, text-secondary\n- Error states: Minimal warning icon, focus on clear error text\n- Loading states: Spinners or skeleton screens (no elaborate animations)","size_bytes":8582},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Editor from \"@/pages/editor\";\nimport AuthPage from \"@/pages/auth\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\n\nfunction AuthCheck({ children }: { children: React.ReactNode }) {\n  const [, setLocation] = useLocation();\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/auth\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  return (\n    <AuthCheck>\n      <Component />\n    </AuthCheck>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/p/:id\" component={() => <ProtectedRoute component={Editor} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1812},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 20% 98%;\n\n  --foreground: 222 15% 10%;\n\n  --border: 220 13% 85%;\n\n  --card: 210 17% 95%;\n\n  --card-foreground: 222 15% 10%;\n\n  --card-border: 220 13% 88%;\n\n  --sidebar: 210 17% 93%;\n\n  --sidebar-foreground: 222 15% 10%;\n\n  --sidebar-border: 220 13% 85%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 210 20% 98%;\n\n  --sidebar-accent: 210 20% 88%;\n\n  --sidebar-accent-foreground: 222 15% 10%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 210 20% 90%;\n\n  --popover-foreground: 222 15% 10%;\n\n  --popover-border: 220 13% 82%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 210 20% 98%;\n\n  --secondary: 210 20% 86%;\n\n  --secondary-foreground: 222 15% 10%;\n\n  --muted: 210 18% 92%;\n\n  --muted-foreground: 215 16% 35%;\n\n  --accent: 210 20% 90%;\n\n  --accent-foreground: 222 15% 10%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 20% 98%;\n\n  --input: 220 13% 75%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 45%;\n  --chart-2: 271 76% 40%;\n  --chart-3: 142 76% 30%;\n  --chart-4: 38 92% 40%;\n  --chart-5: 0 84% 50%;\n\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 20% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 20% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 13% 20% / 0.06), 0px 1px 2px -1px hsl(220 13% 20% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 20% / 0.08), 0px 2px 4px -2px hsl(220 13% 20% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(220 13% 20% / 0.10), 0px 3px 6px -3px hsl(220 13% 20% / 0.07);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 13% 20% / 0.12), 0px 4px 8px -4px hsl(220 13% 20% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 20% / 0.15), 0px 8px 10px -6px hsl(220 13% 20% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 20% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 15% 10%;\n\n  --foreground: 210 20% 98%;\n\n  --border: 222 10% 20%;\n\n  --card: 222 15% 14%;\n\n  --card-foreground: 210 20% 98%;\n\n  --card-border: 222 10% 24%;\n\n  --sidebar: 222 15% 8%;\n\n  --sidebar-foreground: 210 20% 98%;\n\n  --sidebar-border: 222 10% 18%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 210 20% 98%;\n\n  --sidebar-accent: 222 15% 16%;\n\n  --sidebar-accent-foreground: 210 20% 98%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 222 15% 14%;\n\n  --popover-foreground: 210 20% 98%;\n\n  --popover-border: 222 10% 24%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 210 20% 98%;\n\n  --secondary: 222 15% 18%;\n\n  --secondary-foreground: 210 20% 98%;\n\n  --muted: 222 12% 16%;\n\n  --muted-foreground: 215 16% 65%;\n\n  --accent: 222 12% 14%;\n\n  --accent-foreground: 210 20% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 20% 98%;\n  \n  --success: 142 76% 36%;\n  --success-foreground: 210 20% 98%;\n  \n  --warning: 38 92% 50%;\n  --warning-foreground: 222 15% 10%;\n  \n  --ai-accent: 271 76% 53%;\n  --ai-accent-foreground: 210 20% 98%;\n\n  --input: 222 10% 30%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 65%;\n  --chart-2: 271 76% 68%;\n  --chart-3: 142 76% 55%;\n  --chart-4: 38 92% 60%;\n  --chart-5: 0 84% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 15% 5% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(222 15% 5% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(222 15% 5% / 0.25), 0px 1px 2px -1px hsl(222 15% 5% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(222 15% 5% / 0.35), 0px 2px 4px -2px hsl(222 15% 5% / 0.25);\n  --shadow-md: 0px 6px 12px -2px hsl(222 15% 5% / 0.40), 0px 3px 6px -3px hsl(222 15% 5% / 0.30);\n  --shadow-lg: 0px 10px 20px -4px hsl(222 15% 5% / 0.50), 0px 4px 8px -4px hsl(222 15% 5% / 0.35);\n  --shadow-xl: 0px 20px 25px -5px hsl(222 15% 5% / 0.60), 0px 8px 10px -6px hsl(222 15% 5% / 0.40);\n  --shadow-2xl: 0px 25px 50px -12px hsl(222 15% 5% / 0.75);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11658},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\nconst sessionParser = session({\n  secret: process.env.SESSION_SECRET || 'dev-secret-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n  },\n});\n\napp.use(sessionParser);\n\n// Store session parser for WebSocket authentication\napp.set('sessionParser', sessionParser);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2542},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/file-sync.ts":{"content":"import * as fs from 'fs/promises';\nimport * as path from 'path';\n\nconst PROJECTS_ROOT = '/tmp/webide-projects';\n\nexport class FileSync {\n  async ensureProjectDir(projectId: string): Promise<string> {\n    const projectDir = path.join(PROJECTS_ROOT, projectId);\n    await fs.mkdir(projectDir, { recursive: true });\n    return projectDir;\n  }\n\n  async writeFile(projectId: string, filePath: string, content: string): Promise<void> {\n    const projectDir = await this.ensureProjectDir(projectId);\n    const fullPath = path.join(projectDir, filePath);\n    \n    // Ensure parent directory exists\n    await fs.mkdir(path.dirname(fullPath), { recursive: true });\n    \n    // Write file\n    await fs.writeFile(fullPath, content, 'utf-8');\n  }\n\n  async deleteFile(projectId: string, filePath: string): Promise<void> {\n    const projectDir = path.join(PROJECTS_ROOT, projectId);\n    const fullPath = path.join(projectDir, filePath);\n    \n    try {\n      await fs.unlink(fullPath);\n    } catch (error) {\n      // Ignore if file doesn't exist\n    }\n  }\n\n  async syncAllFiles(projectId: string, files: Array<{ path: string; content: string }>): Promise<void> {\n    const projectDir = await this.ensureProjectDir(projectId);\n    \n    for (const file of files) {\n      const fullPath = path.join(projectDir, file.path);\n      await fs.mkdir(path.dirname(fullPath), { recursive: true });\n      await fs.writeFile(fullPath, file.content, 'utf-8');\n    }\n  }\n\n  async deleteProject(projectId: string): Promise<void> {\n    const projectDir = path.join(PROJECTS_ROOT, projectId);\n    try {\n      await fs.rm(projectDir, { recursive: true, force: true });\n    } catch (error) {\n      // Ignore if directory doesn't exist\n    }\n  }\n\n  getProjectDir(projectId: string): string {\n    return path.join(PROJECTS_ROOT, projectId);\n  }\n}\n\nexport const fileSync = new FileSync();\n","size_bytes":1850},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"dark\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n    root.classList.remove(\"light\", \"dark\")\n    root.classList.add(theme)\n    localStorage.setItem(\"theme\", theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme,\n  }\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}\n","size_bytes":1211},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/editor.tsx":{"content":"import { useState, useEffect } from \"react\"\nimport { useParams, useLocation } from \"wouter\"\nimport { useQuery, useMutation } from \"@tanstack/react-query\"\nimport {\n  Play,\n  Square,\n  Package,\n  Rocket,\n  ArrowLeft,\n  Eye,\n  EyeOff,\n  Settings,\n} from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { apiRequest, queryClient } from \"@/lib/queryClient\"\nimport { FileTree } from \"@/components/editor/file-tree\"\nimport { MonacoEditor } from \"@/components/editor/monaco-editor\"\nimport { Terminal } from \"@/components/editor/terminal\"\nimport { AiPanel } from \"@/components/editor/ai-panel\"\nimport { ThemeToggle } from \"@/components/theme-toggle\"\nimport type { Project, File } from \"@shared/schema\"\n\nexport default function Editor() {\n  const { id } = useParams<{ id: string }>()\n  const [, navigate] = useLocation()\n  const { toast } = useToast()\n  \n  const [activeFile, setActiveFile] = useState<string | null>(null)\n  const [editorContent, setEditorContent] = useState('')\n  const [showPreview, setShowPreview] = useState(false)\n  const [deployDialogOpen, setDeployDialogOpen] = useState(false)\n  const [siteId, setSiteId] = useState('')\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false)\n\n  const { data: project } = useQuery<Project>({\n    queryKey: ['/api/projects', id],\n  })\n\n  const { data: files = [], isLoading: filesLoading } = useQuery<File[]>({\n    queryKey: ['/api/projects', id, 'files'],\n  })\n\n  const activeFileData = files.find(f => f.path === activeFile)\n\n  useEffect(() => {\n    if (activeFileData) {\n      setEditorContent(activeFileData.content)\n      setHasUnsavedChanges(false)\n    }\n  }, [activeFile, activeFileData])\n\n  const saveFileMutation = useMutation({\n    mutationFn: async (data: { path: string; content: string }) => {\n      return apiRequest('PUT', `/api/projects/${id}/files`, data)\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', id, 'files'] })\n      setHasUnsavedChanges(false)\n      toast({ title: \"File saved\" })\n    },\n  })\n\n  const createFileMutation = useMutation({\n    mutationFn: async (path: string) => {\n      return apiRequest('POST', `/api/projects/${id}/files`, { path, content: '' })\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', id, 'files'] })\n      toast({ title: \"File created\" })\n    },\n  })\n\n  const deleteFileMutation = useMutation({\n    mutationFn: async (path: string) => {\n      return apiRequest('DELETE', `/api/projects/${id}/files`, { path })\n    },\n    onSuccess: (_, deletedPath) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects', id, 'files'] })\n      if (activeFile === deletedPath) setActiveFile(null)\n      toast({ title: \"File deleted\" })\n    },\n  })\n\n  const runCommandMutation = useMutation({\n    mutationFn: async (command: string[]) => {\n      return apiRequest('POST', '/api/runs', { projectId: id, command })\n    },\n    onSuccess: () => {\n      toast({ title: \"Command started\" })\n    },\n  })\n\n  const deployMutation = useMutation({\n    mutationFn: async (data: { siteId?: string }) => {\n      return apiRequest('POST', '/api/deploy/netlify', {\n        projectId: id,\n        siteId: data.siteId || undefined,\n      })\n    },\n    onSuccess: (data: any) => {\n      setDeployDialogOpen(false)\n      toast({\n        title: \"Deployment started\",\n        description: data.deployUrl ? `URL: ${data.deployUrl}` : \"Building...\",\n      })\n    },\n  })\n\n  const handleEditorChange = (value: string | undefined) => {\n    setEditorContent(value || '')\n    setHasUnsavedChanges(true)\n  }\n\n  const handleSaveFile = () => {\n    if (activeFile && hasUnsavedChanges) {\n      saveFileMutation.mutate({ path: activeFile, content: editorContent })\n    }\n  }\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n        e.preventDefault()\n        handleSaveFile()\n      }\n    }\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [activeFile, editorContent, hasUnsavedChanges])\n\n  const getLanguage = (path: string) => {\n    const ext = path.split('.').pop()\n    const langMap: Record<string, string> = {\n      ts: 'typescript',\n      tsx: 'typescript',\n      js: 'javascript',\n      jsx: 'javascript',\n      json: 'json',\n      css: 'css',\n      html: 'html',\n      md: 'markdown',\n    }\n    return langMap[ext || ''] || 'plaintext'\n  }\n\n  if (!id) return null\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background\">\n      {/* Top Bar */}\n      <header className=\"h-14 border-b border-border bg-sidebar flex items-center justify-between px-4\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => navigate('/')}\n            data-testid=\"button-back\"\n            aria-label=\"Back to dashboard\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <div>\n            <h1 className=\"text-sm font-semibold\" data-testid=\"text-project-name\">\n              {project?.name || 'Loading...'}\n            </h1>\n            {activeFile && (\n              <p className=\"text-xs text-muted-foreground font-mono\" data-testid=\"text-active-file\">\n                {activeFile}\n                {hasUnsavedChanges && ' •'}\n              </p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => runCommandMutation.mutate(['npm', 'ci'])}\n            disabled={runCommandMutation.isPending}\n            data-testid=\"button-install\"\n          >\n            <Package className=\"h-4 w-4 mr-2\" />\n            Install\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => runCommandMutation.mutate(['npm', 'run', 'dev'])}\n            disabled={runCommandMutation.isPending}\n            data-testid=\"button-dev\"\n          >\n            <Play className=\"h-4 w-4 mr-2\" />\n            Dev\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => runCommandMutation.mutate(['npm', 'run', 'build'])}\n            disabled={runCommandMutation.isPending}\n            data-testid=\"button-build\"\n          >\n            <Square className=\"h-4 w-4 mr-2\" />\n            Build\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setDeployDialogOpen(true)}\n            data-testid=\"button-deploy\"\n          >\n            <Rocket className=\"h-4 w-4 mr-2\" />\n            Deploy\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowPreview(!showPreview)}\n            data-testid=\"button-toggle-preview\"\n          >\n            {showPreview ? <EyeOff className=\"h-4 w-4 mr-2\" /> : <Eye className=\"h-4 w-4 mr-2\" />}\n            Preview\n          </Button>\n          <ThemeToggle />\n        </div>\n      </header>\n\n      {/* Main Editor Layout */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* File Tree */}\n        <div className=\"w-64 flex-shrink-0\">\n          {!filesLoading && (\n            <FileTree\n              files={files}\n              activeFile={activeFile}\n              onFileSelect={setActiveFile}\n              onFileCreate={(path) => createFileMutation.mutate(path)}\n              onFileDelete={(path) => deleteFileMutation.mutate(path)}\n            />\n          )}\n        </div>\n\n        {/* Editor & Terminal */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Monaco Editor */}\n          <div className=\"flex-1 bg-background\">\n            {activeFile ? (\n              <MonacoEditor\n                value={editorContent}\n                onChange={handleEditorChange}\n                language={getLanguage(activeFile)}\n                path={activeFile}\n              />\n            ) : (\n              <div className=\"h-full flex items-center justify-center text-muted-foreground\">\n                <div className=\"text-center\">\n                  <Settings className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                  <p data-testid=\"text-no-file\">Select a file to start editing</p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Terminal */}\n          <div className=\"h-64 border-t border-border\">\n            <Terminal projectId={id} />\n          </div>\n        </div>\n\n        {/* AI Panel */}\n        <AiPanel\n          projectId={id}\n          currentFile={activeFile}\n          currentContent={editorContent}\n          onApplyPatch={(content) => {\n            setEditorContent(content)\n            setHasUnsavedChanges(true)\n            toast({ title: \"Patch applied\", description: \"Don't forget to save!\" })\n          }}\n        />\n\n        {/* Preview Panel */}\n        {showPreview && (\n          <div className=\"w-96 border-l border-border bg-card\">\n            <div className=\"h-10 border-b border-border bg-sidebar flex items-center px-3\">\n              <h3 className=\"text-sm font-semibold\" data-testid=\"text-preview\">Preview</h3>\n            </div>\n            <iframe\n              src={`/preview/${id}`}\n              className=\"w-full h-full\"\n              title=\"Preview\"\n              data-testid=\"iframe-preview\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Deploy Dialog */}\n      <Dialog open={deployDialogOpen} onOpenChange={setDeployDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Deploy to Netlify</DialogTitle>\n            <DialogDescription>\n              Deploy your project to Netlify. Optionally provide a site ID to update an existing site.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"siteId\">Netlify Site ID (optional)</Label>\n              <Input\n                id=\"siteId\"\n                placeholder=\"your-site-id\"\n                value={siteId}\n                onChange={(e) => setSiteId(e.target.value)}\n                data-testid=\"input-site-id\"\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end gap-3\">\n            <Button variant=\"outline\" onClick={() => setDeployDialogOpen(false)} data-testid=\"button-cancel-deploy\">\n              Cancel\n            </Button>\n            <Button\n              onClick={() => deployMutation.mutate({ siteId })}\n              disabled={deployMutation.isPending}\n              data-testid=\"button-confirm-deploy\"\n            >\n              {deployMutation.isPending ? 'Deploying...' : 'Deploy'}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n","size_bytes":11220},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/editor/file-tree.tsx":{"content":"import { useState } from \"react\"\nimport { ChevronRight, ChevronDown, File as FileIcon, Folder, FolderOpen, Plus, Trash2 } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@/components/ui/context-menu\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport type { File } from \"@shared/schema\"\n\ninterface FileTreeNode {\n  name: string\n  path: string\n  type: 'file' | 'folder'\n  children?: FileTreeNode[]\n}\n\ninterface FileTreeProps {\n  files: File[]\n  activeFile: string | null\n  onFileSelect: (path: string) => void\n  onFileCreate: (path: string) => void\n  onFileDelete: (path: string) => void\n}\n\nfunction buildFileTree(files: File[]): FileTreeNode[] {\n  const root: FileTreeNode[] = []\n  \n  files.forEach(file => {\n    const parts = file.path.split('/')\n    let current = root\n    \n    parts.forEach((part, index) => {\n      const isFile = index === parts.length - 1\n      const path = parts.slice(0, index + 1).join('/')\n      \n      let existing = current.find(n => n.name === part)\n      \n      if (!existing) {\n        existing = {\n          name: part,\n          path,\n          type: isFile ? 'file' : 'folder',\n          children: isFile ? undefined : [],\n        }\n        current.push(existing)\n      }\n      \n      if (!isFile && existing.children) {\n        current = existing.children\n      }\n    })\n  })\n  \n  return root.sort((a, b) => {\n    if (a.type !== b.type) return a.type === 'folder' ? -1 : 1\n    return a.name.localeCompare(b.name)\n  })\n}\n\nfunction TreeNode({\n  node,\n  activeFile,\n  onFileSelect,\n  onFileCreate,\n  onFileDelete,\n  level = 0,\n}: {\n  node: FileTreeNode\n  activeFile: string | null\n  onFileSelect: (path: string) => void\n  onFileCreate: (path: string) => void\n  onFileDelete: (path: string) => void\n  level?: number\n}) {\n  const [expanded, setExpanded] = useState(true)\n  const isActive = activeFile === node.path\n\n  const handleClick = () => {\n    if (node.type === 'file') {\n      onFileSelect(node.path)\n    } else {\n      setExpanded(!expanded)\n    }\n  }\n\n  return (\n    <div>\n      <ContextMenu>\n        <ContextMenuTrigger>\n          <div\n            className={`flex items-center h-8 px-2 rounded-sm cursor-pointer transition-colors hover-elevate ${\n              isActive ? 'bg-primary/10 border-l-2 border-primary' : ''\n            }`}\n            style={{ paddingLeft: `${level * 16 + 8}px` }}\n            onClick={handleClick}\n            data-testid={`tree-item-${node.path}`}\n          >\n            {node.type === 'folder' ? (\n              <>\n                {expanded ? (\n                  <ChevronDown className=\"h-4 w-4 text-muted-foreground mr-1\" />\n                ) : (\n                  <ChevronRight className=\"h-4 w-4 text-muted-foreground mr-1\" />\n                )}\n                {expanded ? (\n                  <FolderOpen className=\"h-4 w-4 text-muted-foreground mr-2\" />\n                ) : (\n                  <Folder className=\"h-4 w-4 text-muted-foreground mr-2\" />\n                )}\n              </>\n            ) : (\n              <FileIcon className=\"h-4 w-4 text-muted-foreground mr-2 ml-5\" />\n            )}\n            <span className=\"text-sm truncate\">{node.name}</span>\n          </div>\n        </ContextMenuTrigger>\n        <ContextMenuContent>\n          {node.type === 'folder' && (\n            <ContextMenuItem onClick={() => onFileCreate(node.path)} data-testid={`menu-new-file-${node.path}`}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New File\n            </ContextMenuItem>\n          )}\n          <ContextMenuItem onClick={() => onFileDelete(node.path)} data-testid={`menu-delete-${node.path}`}>\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            Delete\n          </ContextMenuItem>\n        </ContextMenuContent>\n      </ContextMenu>\n      \n      {node.type === 'folder' && expanded && node.children && (\n        <div>\n          {node.children.map(child => (\n            <TreeNode\n              key={child.path}\n              node={child}\n              activeFile={activeFile}\n              onFileSelect={onFileSelect}\n              onFileCreate={onFileCreate}\n              onFileDelete={onFileDelete}\n              level={level + 1}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport function FileTree({ files, activeFile, onFileSelect, onFileCreate, onFileDelete }: FileTreeProps) {\n  const [newFileDialogOpen, setNewFileDialogOpen] = useState(false)\n  const [newFilePath, setNewFilePath] = useState('')\n  const [parentPath, setParentPath] = useState('')\n  \n  const tree = buildFileTree(files)\n\n  const handleCreateFile = (path: string) => {\n    setParentPath(path)\n    setNewFilePath('')\n    setNewFileDialogOpen(true)\n  }\n\n  const handleConfirmCreate = () => {\n    if (newFilePath.trim()) {\n      const fullPath = parentPath ? `${parentPath}/${newFilePath}` : newFilePath\n      onFileCreate(fullPath)\n      setNewFileDialogOpen(false)\n      setNewFilePath('')\n    }\n  }\n\n  return (\n    <>\n      <div className=\"h-full bg-sidebar border-r border-sidebar-border overflow-y-auto\">\n        <div className=\"p-3 border-b border-sidebar-border flex items-center justify-between\">\n          <h3 className=\"text-sm font-semibold uppercase tracking-wide\" data-testid=\"text-explorer\">\n            Explorer\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"h-6 w-6\"\n            onClick={() => handleCreateFile('')}\n            data-testid=\"button-new-file\"\n            aria-label=\"New file\"\n          >\n            <Plus className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <div className=\"p-2\">\n          {tree.map(node => (\n            <TreeNode\n              key={node.path}\n              node={node}\n              activeFile={activeFile}\n              onFileSelect={onFileSelect}\n              onFileCreate={handleCreateFile}\n              onFileDelete={onFileDelete}\n            />\n          ))}\n        </div>\n      </div>\n\n      <Dialog open={newFileDialogOpen} onOpenChange={setNewFileDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create New File</DialogTitle>\n            <DialogDescription>\n              {parentPath ? `Creating in: ${parentPath}` : 'Creating in root directory'}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"filename\">File name</Label>\n              <Input\n                id=\"filename\"\n                placeholder=\"example.tsx\"\n                value={newFilePath}\n                onChange={(e) => setNewFilePath(e.target.value)}\n                onKeyDown={(e) => e.key === 'Enter' && handleConfirmCreate()}\n                data-testid=\"input-filename\"\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end gap-3\">\n            <Button variant=\"outline\" onClick={() => setNewFileDialogOpen(false)} data-testid=\"button-cancel-file\">\n              Cancel\n            </Button>\n            <Button onClick={handleConfirmCreate} data-testid=\"button-create-file\">\n              Create\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n","size_bytes":7496},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"README.md":{"content":"# Web IDE - Replit-lite with Local AI and Docker Sandboxes\n\nA production-grade web-based IDE with real Docker sandboxes, multi-model AI assistance via Ollama, and Netlify deployment integration.\n\n## Features\n\n### Core Functionality\n- **Project Management**: Create projects from templates (Vite+React+TS, Next.js Static, Vanilla JS)\n- **Monaco Editor**: Full-featured code editor with syntax highlighting, minimap, and TypeScript support\n- **File Tree**: Hierarchical file navigation with create, delete, and context menu operations\n- **Interactive Terminal**: Real-time terminal access to Docker containers via WebSocket (xterm.js)\n- **Live Preview**: Auto-detect dev server ports and preview running applications\n- **AI Code Assistant**: Multi-model support (Qwen2.5-Coder, CodeLlama, DeepSeek) for code explanation, refactoring, and generation\n- **Netlify Deployment**: One-click deployment of static sites and SPAs to Netlify\n\n### Technical Architecture\n- **Frontend**: React + TypeScript + Monaco Editor + xterm.js + Tailwind CSS\n- **Backend**: Express + TypeScript + WebSocket (ws)\n- **Sandboxing**: Docker containers with resource limits (0.5 CPU, 512MB RAM, 256 PIDs)\n- **AI**: Ollama local LLM server\n- **Deployment**: Netlify API integration\n- **Storage**: In-memory with file system persistence\n\n## Prerequisites\n\n- Node.js 20+\n- **Docker (Required)** - The IDE uses Docker containers for sandboxed code execution. Docker must be running and accessible via `/var/run/docker.sock`\n- Ollama (for AI features) - Optional but recommended\n\n⚠️ **Note**: This application requires Docker to be installed and running on the host system. It cannot run in environments without Docker support (like nested containers or restricted cloud environments).\n\n## Quick Start\n\n### 1. Install Ollama (Optional)\n\n```bash\n# Install Ollama\ncurl -fsSL https://ollama.com/install.sh | sh\n\n# Pull a code model\nollama pull qwen2.5-coder:7b\n\n# Verify Ollama is running\ncurl http://localhost:11434/api/tags\n```\n\n### 2. Set Environment Variables\n\nThe following secrets are already configured:\n- `DATABASE_URL` - PostgreSQL connection (for future database integration)\n- `NETLIFY_ACCESS_TOKEN` - Netlify API token for deployments\n- `SESSION_SECRET` - Session encryption key\n\n### 3. Start the Application\n\n```bash\n# Install dependencies (automatically handled by Replit)\nnpm install\n\n# Start the development server\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## Usage Guide\n\n### Creating a Project\n\n1. Click \"New Project\" on the dashboard\n2. Enter a project name\n3. Select a template:\n   - **Vite + React + TypeScript**: Modern React app with Vite bundler\n   - **Next.js Static**: Next.js with static site generation\n   - **Vanilla JavaScript**: Plain HTML, CSS, and JS\n4. Click \"Create Project\"\n\n### Using the Editor\n\n**File Operations:**\n- Click files in the tree to open them\n- Right-click folders to create new files\n- Right-click files to delete them\n- Press `Cmd+S` (Mac) or `Ctrl+S` (Windows) to save\n\n**Running Commands:**\n- **Install**: Runs `npm ci` to install dependencies\n- **Dev**: Starts the development server\n- **Build**: Builds the project for production\n- **Deploy**: Deploys to Netlify\n\n**Terminal:**\n- Interactive shell access to your Docker sandbox\n- All standard shell commands available\n- Auto-connects when sandbox is created\n\n**AI Assistant:**\n- Select a model (Qwen2.5-Coder recommended)\n- Choose mode: Explain, Refactor, or Generate\n- Type your question or requirement\n- Click \"Apply\" to insert AI-generated code into the editor\n\n**Preview:**\n- Toggle preview panel with the Preview button\n- Auto-detects dev server on ports 5173, 3000, or 8000\n- Refreshes automatically when dev server restarts\n\n### Deploying to Netlify\n\n1. Click the \"Deploy\" button\n2. (Optional) Enter a Netlify Site ID to update an existing site\n3. Click \"Deploy\"\n4. Wait for the build to complete\n5. Your site will be live at the provided URL\n\n## Project Structure\n\n```\n/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/    # Reusable UI components\n│   │   │   ├── editor/   # Editor-specific components\n│   │   │   └── ui/       # Shadcn UI primitives\n│   │   ├── pages/        # Route pages (Dashboard, Editor)\n│   │   └── lib/          # Utilities and config\n│   └── index.html\n│\n├── server/                # Backend Express application\n│   ├── routes.ts         # API routes and WebSocket handlers\n│   ├── storage.ts        # In-memory data storage\n│   ├── file-sync.ts      # File system persistence\n│   ├── docker-manager.ts # Docker container orchestration\n│   ├── ollama-client.ts  # AI model integration\n│   ├── netlify-deploy.ts # Deployment logic\n│   └── index.ts          # Server entry point\n│\n├── shared/               # Shared types and schemas\n│   └── schema.ts        # Data models and templates\n│\n└── design_guidelines.md  # Frontend design system\n```\n\n## API Endpoints\n\n### Projects\n- `GET /api/projects` - List all projects\n- `GET /api/projects/:id` - Get project details\n- `POST /api/projects` - Create new project\n- `DELETE /api/projects/:id` - Delete project\n\n### Files\n- `GET /api/projects/:id/files` - List project files\n- `POST /api/projects/:id/files` - Create file\n- `PUT /api/projects/:id/files` - Update file\n- `DELETE /api/projects/:id/files` - Delete file\n\n### Sandbox\n- `POST /api/runs` - Execute command in sandbox\n- `WS /ws/terminal/:projectId` - Interactive terminal WebSocket\n\n### AI\n- `POST /api/ai/complete` - Get AI code completion\n\n### Deployment\n- `POST /api/deploy/netlify` - Deploy to Netlify\n- `GET /preview/:projectId` - Preview running application\n\n## Security & Limits\n\n### Sandbox Isolation\n- Containers run as non-root user (`node`)\n- Resource limits: 0.5 CPU, 512MB RAM, 256 processes max\n- Project directory bind-mounted read-write\n- Auto-cleanup: 60s idle timeout, 120s max runtime\n\n### Rate Limits\n- 1 active sandbox per user\n- New sandbox automatically terminates existing one\n- Cleanup job runs every 30 seconds\n\n### Data Persistence\n- Projects stored in memory during session\n- Files synced to `/tmp/webide-projects/{projectId}/`\n- Sandboxes are ephemeral (containers auto-removed)\n\n## Development\n\n### Adding New Templates\n\nEdit `shared/schema.ts` and add to `templateConfigs`:\n\n```typescript\n'my-template': {\n  name: 'My Template',\n  description: 'Description here',\n  devCommand: 'npm run dev',\n  buildCommand: 'npm run build',\n  installCommand: 'npm ci',\n  defaultPort: 3000,\n  files: {\n    'package.json': '...',\n    'index.html': '...',\n    // ... more files\n  }\n}\n```\n\n### Customizing the Design\n\nAll design tokens are in:\n- `client/src/index.css` - Color variables and theme\n- `tailwind.config.ts` - Tailwind configuration\n- `design_guidelines.md` - Complete design system documentation\n\n### Environment Variables\n\n- `PORT` - Server port (default: 5000)\n- `OLLAMA_BASE_URL` - Ollama API URL (default: http://localhost:11434)\n- `NETLIFY_ACCESS_TOKEN` - Netlify API token\n- `DATABASE_URL` - PostgreSQL connection string (for future use)\n\n## Troubleshooting\n\n### Ollama not working\n- Ensure Ollama is running: `ollama serve`\n- Check models are pulled: `ollama list`\n- Verify API: `curl http://localhost:11434/api/tags`\n\n### Docker sandbox fails to start\n- Ensure Docker is running: `docker ps`\n- Check Docker socket access: `ls -la /var/run/docker.sock`\n- Verify Docker permissions: `docker run hello-world`\n- Check available ports: `lsof -i :8000-9000`\n- Review container logs: `docker logs <container-id>`\n- **Replit/Cloud environments**: Docker-in-Docker is not supported. Run on local machine or VM with Docker installed\n\n### Netlify deployment fails\n- Verify NETLIFY_ACCESS_TOKEN is set\n- Ensure project has been built first\n- Check build directory exists (dist/out/.)\n\n### Terminal not connecting\n- Ensure sandbox is created (run Install/Dev first)\n- Check WebSocket connection in browser DevTools\n- Verify Docker container is running: `docker ps`\n\n## Future Roadmap\n\n### Phase 2\n- Database persistence (Postgres/Drizzle ORM)\n- User authentication (Supabase Auth)\n- Team workspaces and collaboration\n- Version control (Git integration)\n- More templates and frameworks\n\n### Phase 3\n- Real-time collaborative editing\n- Custom domain support\n- Advanced AI features (code review, test generation)\n- Performance monitoring\n- Template marketplace\n\n## Contributing\n\nThis is a production MVP. For bugs or feature requests, please create an issue with:\n- Description of the problem\n- Steps to reproduce\n- Expected vs actual behavior\n- Browser/system information\n\n## License\n\nMIT License - see LICENSE file for details\n","size_bytes":8803},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\"\nimport { useQuery, useMutation } from \"@tanstack/react-query\"\nimport { Link } from \"wouter\"\nimport { Plus, Folder, Trash2, Code2, FileCode } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { apiRequest, queryClient } from \"@/lib/queryClient\"\nimport type { Project, TemplateType } from \"@shared/schema\"\nimport { ThemeToggle } from \"@/components/theme-toggle\"\n\nconst templates = [\n  {\n    id: 'vite-react-ts' as TemplateType,\n    name: 'Vite + React + TypeScript',\n    description: 'Modern React app with Vite bundler',\n    icon: Code2,\n  },\n  {\n    id: 'next-static' as TemplateType,\n    name: 'Next.js Static',\n    description: 'Next.js with static export',\n    icon: FileCode,\n  },\n  {\n    id: 'vanilla-js' as TemplateType,\n    name: 'Vanilla JavaScript',\n    description: 'Plain HTML, CSS, and JS',\n    icon: Folder,\n  },\n]\n\nexport default function Dashboard() {\n  const [open, setOpen] = useState(false)\n  const [selectedTemplate, setSelectedTemplate] = useState<TemplateType>('vite-react-ts')\n  const [projectName, setProjectName] = useState('')\n  const { toast } = useToast()\n\n  const { data: projects, isLoading } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  })\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: { name: string; template: TemplateType }) => {\n      return apiRequest('POST', '/api/projects', data)\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] })\n      setOpen(false)\n      setProjectName('')\n      toast({\n        title: \"Project created\",\n        description: \"Your new project is ready to code!\",\n      })\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create project\",\n        variant: \"destructive\",\n      })\n    },\n  })\n\n  const deleteProjectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/projects/${id}`, undefined)\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] })\n      toast({\n        title: \"Project deleted\",\n        description: \"Project has been removed\",\n      })\n    },\n  })\n\n  const handleCreateProject = () => {\n    if (!projectName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a project name\",\n        variant: \"destructive\",\n      })\n      return\n    }\n    createProjectMutation.mutate({ name: projectName, template: selectedTemplate })\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"h-14 border-b border-border bg-sidebar flex items-center justify-between px-6\">\n        <div className=\"flex items-center gap-3\">\n          <Code2 className=\"h-6 w-6 text-primary\" />\n          <h1 className=\"text-lg font-semibold\" data-testid=\"text-app-title\">Web IDE</h1>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Dialog open={open} onOpenChange={setOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-new-project\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Project\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl\">Create New Project</DialogTitle>\n                <DialogDescription>\n                  Choose a template and name your project\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-6 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Project Name</Label>\n                  <Input\n                    id=\"name\"\n                    placeholder=\"my-awesome-project\"\n                    value={projectName}\n                    onChange={(e) => setProjectName(e.target.value)}\n                    data-testid=\"input-project-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label>Template</Label>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                    {templates.map((template) => (\n                      <Card\n                        key={template.id}\n                        className={`cursor-pointer transition-colors hover-elevate ${\n                          selectedTemplate === template.id\n                            ? 'border-primary'\n                            : ''\n                        }`}\n                        onClick={() => setSelectedTemplate(template.id)}\n                        data-testid={`card-template-${template.id}`}\n                      >\n                        <CardHeader className=\"pb-3\">\n                          <template.icon className=\"h-10 w-10 text-muted-foreground mb-2\" />\n                          <CardTitle className=\"text-base\">{template.name}</CardTitle>\n                          <CardDescription className=\"text-xs\">\n                            {template.description}\n                          </CardDescription>\n                        </CardHeader>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end gap-3 pt-4 border-t border-border\">\n                <Button variant=\"outline\" onClick={() => setOpen(false)} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreateProject}\n                  disabled={createProjectMutation.isPending}\n                  data-testid=\"button-create\"\n                >\n                  {createProjectMutation.isPending ? 'Creating...' : 'Create Project'}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <ThemeToggle />\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-6 py-12\">\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-6 bg-muted rounded w-3/4 mb-2\" />\n                  <div className=\"h-4 bg-muted rounded w-1/2\" />\n                </CardHeader>\n              </Card>\n            ))}\n          </div>\n        ) : projects && projects.length > 0 ? (\n          <>\n            <h2 className=\"text-2xl font-bold mb-6\" data-testid=\"text-projects-heading\">Your Projects</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {projects.map((project) => (\n                <Card key={project.id} className=\"hover-elevate transition-colors\" data-testid={`card-project-${project.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg mb-1\" data-testid={`text-project-name-${project.id}`}>\n                          {project.name}\n                        </CardTitle>\n                        <CardDescription className=\"text-sm font-mono\" data-testid={`text-project-template-${project.id}`}>\n                          {project.template}\n                        </CardDescription>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={(e) => {\n                          e.preventDefault()\n                          deleteProjectMutation.mutate(project.id)\n                        }}\n                        data-testid={`button-delete-${project.id}`}\n                        aria-label=\"Delete project\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <Link href={`/p/${project.id}`}>\n                      <Button variant=\"outline\" className=\"w-full\" data-testid={`button-open-${project.id}`}>\n                        Open Project\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </>\n        ) : (\n          <div className=\"flex flex-col items-center justify-center py-24 text-center\">\n            <Folder className=\"h-24 w-24 text-muted-foreground mb-4\" />\n            <h3 className=\"text-2xl font-semibold mb-2\" data-testid=\"text-empty-state\">\n              No projects yet\n            </h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Create your first project to get started\n            </p>\n            <Button onClick={() => setOpen(true)} data-testid=\"button-create-first\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Project\n            </Button>\n          </div>\n        )}\n      </main>\n    </div>\n  )\n}\n","size_bytes":9543},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/editor/terminal.tsx":{"content":"import { useEffect, useRef } from \"react\"\nimport { Terminal as XTerm } from \"@xterm/xterm\"\nimport { FitAddon } from \"@xterm/addon-fit\"\nimport { WebLinksAddon } from \"@xterm/addon-web-links\"\nimport \"@xterm/xterm/css/xterm.css\"\nimport { Button } from \"@/components/ui/button\"\nimport { Trash2, X } from \"lucide-react\"\n\ninterface TerminalProps {\n  projectId: string\n}\n\nexport function Terminal({ projectId }: TerminalProps) {\n  const terminalRef = useRef<HTMLDivElement>(null)\n  const xtermRef = useRef<XTerm | null>(null)\n  const wsRef = useRef<WebSocket | null>(null)\n  const fitAddonRef = useRef<FitAddon | null>(null)\n\n  useEffect(() => {\n    if (!terminalRef.current) return\n\n    // Initialize xterm\n    const term = new XTerm({\n      cursorBlink: true,\n      fontSize: 14,\n      fontFamily: \"'JetBrains Mono', 'Fira Code', monospace\",\n      theme: {\n        background: '#1a1a1f',\n        foreground: '#e5e7eb',\n        cursor: '#60a5fa',\n        black: '#1a1a1f',\n        red: '#ef4444',\n        green: '#10b981',\n        yellow: '#f59e0b',\n        blue: '#3b82f6',\n        magenta: '#a855f7',\n        cyan: '#06b6d4',\n        white: '#e5e7eb',\n        brightBlack: '#4b5563',\n        brightRed: '#f87171',\n        brightGreen: '#34d399',\n        brightYellow: '#fbbf24',\n        brightBlue: '#60a5fa',\n        brightMagenta: '#c084fc',\n        brightCyan: '#22d3ee',\n        brightWhite: '#f3f4f6',\n      },\n    })\n\n    const fitAddon = new FitAddon()\n    const webLinksAddon = new WebLinksAddon()\n    \n    term.loadAddon(fitAddon)\n    term.loadAddon(webLinksAddon)\n    term.open(terminalRef.current)\n    fitAddon.fit()\n\n    xtermRef.current = term\n    fitAddonRef.current = fitAddon\n\n    // Connect WebSocket\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\"\n    const wsUrl = `${protocol}//${window.location.host}/ws/terminal/${projectId}`\n    const ws = new WebSocket(wsUrl)\n\n    ws.onopen = () => {\n      term.writeln('Terminal connected. Type commands below:')\n      term.write('$ ')\n    }\n\n    ws.onmessage = (event) => {\n      term.write(event.data)\n    }\n\n    ws.onerror = () => {\n      term.writeln('\\r\\n\\x1b[31mWebSocket connection error\\x1b[0m')\n    }\n\n    ws.onclose = () => {\n      term.writeln('\\r\\n\\x1b[33mTerminal disconnected\\x1b[0m')\n    }\n\n    term.onData((data) => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(data)\n      }\n    })\n\n    wsRef.current = ws\n\n    // Resize observer\n    const resizeObserver = new ResizeObserver(() => {\n      fitAddon.fit()\n    })\n    resizeObserver.observe(terminalRef.current)\n\n    return () => {\n      resizeObserver.disconnect()\n      ws.close()\n      term.dispose()\n    }\n  }, [projectId])\n\n  const handleClear = () => {\n    xtermRef.current?.clear()\n  }\n\n  const handleKill = () => {\n    if (wsRef.current) {\n      wsRef.current.send('\\x03') // Send Ctrl+C\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col h-full bg-card border-t border-card-border\">\n      <div className=\"h-10 border-b border-border bg-sidebar flex items-center justify-between px-3\">\n        <h3 className=\"text-sm font-semibold\" data-testid=\"text-terminal\">Terminal</h3>\n        <div className=\"flex items-center gap-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"h-7 w-7\"\n            onClick={handleClear}\n            data-testid=\"button-clear-terminal\"\n            aria-label=\"Clear terminal\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"h-7 w-7\"\n            onClick={handleKill}\n            data-testid=\"button-kill-process\"\n            aria-label=\"Kill process\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n      <div ref={terminalRef} className=\"flex-1 p-2\" data-testid=\"terminal-content\" />\n    </div>\n  )\n}\n","size_bytes":3922},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { useTheme } from \"@/components/theme-provider\"\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n      aria-label=\"Toggle theme\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n    </Button>\n  )\n}\n","size_bytes":652},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        success: {\n          DEFAULT: \"hsl(var(--success) / <alpha-value>)\",\n          foreground: \"hsl(var(--success-foreground) / <alpha-value>)\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning) / <alpha-value>)\",\n          foreground: \"hsl(var(--warning-foreground) / <alpha-value>)\",\n        },\n        \"ai-accent\": {\n          DEFAULT: \"hsl(var(--ai-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--ai-accent-foreground) / <alpha-value>)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4538},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { dbStorage as storage } from \"./db-storage\";\nimport { dockerManager } from \"./docker-manager\";\nimport { ollamaClient } from \"./ollama-client\";\nimport { netlifyDeploy } from \"./netlify-deploy\";\nimport { fileSync } from \"./file-sync\";\nimport { templateConfigs } from \"@shared/schema\";\nimport * as path from \"path\";\n\nimport { requireAuth, optionalAuth } from \"./auth\";\nimport bcrypt from \"bcrypt\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // Auth routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { email, username, password } = req.body;\n\n      if (!email || !username || !password) {\n        return res.status(400).json({ error: \"Email, username, and password required\" });\n      }\n\n      // Check if user exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Email already registered\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        email,\n        username,\n        passwordHash,\n      });\n\n      // Set session\n      req.session.userId = user.id;\n\n      res.json({\n        id: user.id,\n        email: user.email,\n        username: user.username,\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email and password required\" });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.passwordHash) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!validPassword) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Set session\n      req.session.userId = user.id;\n\n      res.json({\n        id: user.id,\n        email: user.email,\n        username: user.username,\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ error: \"Logout failed\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get(\"/api/auth/me\", optionalAuth, (req, res) => {\n    if (req.user) {\n      res.json(req.user);\n    } else {\n      res.status(401).json({ error: \"Not authenticated\" });\n    }\n  });\n\n  // Ensure demo user exists for backward compatibility\n  let demoUser = await storage.getUserByEmail(\"demo@webide.dev\");\n  if (!demoUser) {\n    const demoPasswordHash = await bcrypt.hash(\"demo\", 10);\n    demoUser = await storage.createUser({\n      email: \"demo@webide.dev\",\n      username: \"demo\",\n      passwordHash: demoPasswordHash,\n    });\n  }\n\n  // Project routes\n  app.get(\"/api/projects\", requireAuth, async (req, res) => {\n    try {\n      const projects = await storage.getProjectsByUserId(req.user!.id);\n      res.json(projects);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", requireAuth, async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      // Check ownership\n      if (project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      res.json(project);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/projects\", requireAuth, async (req, res) => {\n    try {\n      const { name, template } = req.body;\n      \n      if (!name || !template) {\n        return res.status(400).json({ error: \"Name and template required\" });\n      }\n\n      const templateConfig = templateConfigs[template as keyof typeof templateConfigs];\n      if (!templateConfig) {\n        return res.status(400).json({ error: \"Invalid template\" });\n      }\n\n      const project = await storage.createProject({\n        userId: req.user!.id,\n        name,\n        template,\n        description: templateConfig.description,\n      });\n\n      // Create template files in storage and on disk\n      for (const [filePath, content] of Object.entries(templateConfig.files)) {\n        await storage.createFile({\n          projectId: project.id,\n          path: filePath,\n          content,\n        });\n        await fileSync.writeFile(project.id, filePath, content);\n      }\n\n      res.json(project);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", requireAuth, async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      // Check ownership\n      if (project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      await storage.deleteProject(req.params.id);\n      await fileSync.deleteProject(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // File routes\n  app.get(\"/api/projects/:id/files\", requireAuth, async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project || project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      const files = await storage.getFilesByProjectId(req.params.id);\n      res.json(files);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/projects/:id/files\", requireAuth, async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project || project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      const { path: filePath, content } = req.body;\n      \n      const file = await storage.createFile({\n        projectId: req.params.id,\n        path: filePath,\n        content: content || \"\",\n      });\n\n      await fileSync.writeFile(req.params.id, filePath, content || \"\");\n\n      res.json(file);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put(\"/api/projects/:id/files\", requireAuth, async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project || project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      const { path: filePath, content } = req.body;\n      \n      const existing = await storage.getFileByPath(req.params.id, filePath);\n      let file;\n      \n      if (existing) {\n        file = await storage.updateFileByPath(req.params.id, filePath, content);\n      } else {\n        file = await storage.createFile({\n          projectId: req.params.id,\n          path: filePath,\n          content,\n        });\n      }\n\n      await fileSync.writeFile(req.params.id, filePath, content);\n\n      res.json(file);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/projects/:id/files\", requireAuth, async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project || project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      const { path: filePath } = req.body;\n      await storage.deleteFileByPath(req.params.id, filePath);\n      await fileSync.deleteFile(req.params.id, filePath);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Run command (creates sandbox if needed)\n  app.post(\"/api/runs\", requireAuth, async (req, res) => {\n    try {\n      const { projectId, command } = req.body;\n\n      if (!projectId || !command || !Array.isArray(command)) {\n        return res.status(400).json({ error: \"Invalid request\" });\n      }\n\n      // Check project ownership\n      const project = await storage.getProject(projectId);\n      if (!project || project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      // Kill any existing sandbox for this user (1 per user limit)\n      const existingSandbox = await storage.getSandboxByUserId(req.user!.id);\n      if (existingSandbox && existingSandbox.projectId !== projectId) {\n        if (existingSandbox.containerId) {\n          await dockerManager.stopContainer(existingSandbox.containerId);\n        }\n        await storage.deleteSandbox(existingSandbox.id);\n      }\n\n      // Check if sandbox exists for this project\n      let sandbox = await storage.getSandboxByProjectId(projectId);\n      \n      if (!sandbox) {\n        // Ensure files are synced to disk\n        const files = await storage.getFilesByProjectId(projectId);\n        await fileSync.syncAllFiles(projectId, files.map(f => ({ path: f.path, content: f.content })));\n        \n        const projectDir = fileSync.getProjectDir(projectId);\n\n        // Create Docker container\n        const { containerId, port } = await dockerManager.createSandbox({\n          projectId,\n          userId: req.user!.id,\n          workingDir: projectDir,\n          cpus: 0.5,\n          memory: 512,\n          pidsLimit: 256,\n        });\n\n        sandbox = await storage.createSandbox({\n          projectId,\n          userId: req.user!.id,\n          containerId,\n          status: \"running\",\n          port,\n          lastActivity: new Date(),\n        });\n      }\n\n      // Execute command in container\n      if (sandbox.containerId) {\n        await dockerManager.execCommand(\n          sandbox.containerId,\n          command,\n          (output) => {\n            console.log(output);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n\n        await storage.updateSandbox(sandbox.id, {\n          lastActivity: new Date(),\n        });\n      }\n\n      res.json({ success: true, sandboxId: sandbox.id, port: sandbox.port });\n    } catch (error: any) {\n      console.error(\"Run error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // AI completion\n  app.post(\"/api/ai/complete\", requireAuth, async (req, res) => {\n    try {\n      const { model, prompt, filePath, content } = req.body;\n\n      if (!model || !prompt) {\n        return res.status(400).json({ error: \"Model and prompt required\" });\n      }\n\n      const response = await ollamaClient.generate({\n        model,\n        prompt,\n      });\n\n      // Store interaction\n      await storage.createAiInteraction({\n        userId: req.user!.id,\n        projectId: req.body.projectId || null,\n        model,\n        prompt,\n        response,\n        filePath: filePath || null,\n      });\n\n      res.json({ response });\n    } catch (error: any) {\n      console.error(\"AI error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get deployment history for a project\n  app.get(\"/api/projects/:id/deployments\", requireAuth, async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project || project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      const deploymentHistory = await storage.getDeploymentsByProjectId(req.params.id);\n      res.json(deploymentHistory);\n    } catch (error: any) {\n      console.error(\"Get deployments error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Rollback to a previous deployment\n  app.post(\"/api/deploy/rollback\", requireAuth, async (req, res) => {\n    try {\n      const { deploymentId } = req.body;\n\n      if (!deploymentId) {\n        return res.status(400).json({ error: \"Deployment ID required\" });\n      }\n\n      const deployment = await storage.getDeployment(deploymentId);\n      if (!deployment) {\n        return res.status(404).json({ error: \"Deployment not found\" });\n      }\n\n      // Check ownership\n      if (deployment.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      // Only allow rollback of successful deployments\n      if (deployment.status !== \"success\") {\n        return res.status(400).json({ error: \"Can only rollback successful deployments\" });\n      }\n\n      // Trigger a redeploy using the same siteId (this will rollback to current state)\n      const project = await storage.getProject(deployment.projectId);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n\n      const template = templateConfigs[project.template as keyof typeof templateConfigs];\n      \n      // Create new deployment record\n      const newDeployment = await storage.createDeployment({\n        projectId: deployment.projectId,\n        userId: req.user!.id,\n        siteId: deployment.siteId || null,\n        status: \"pending\",\n        deployUrl: null,\n        buildLog: null,\n      });\n\n      // Start deployment in background (same flow as regular deploy)\n      (async () => {\n        try {\n          await storage.updateDeployment(newDeployment.id, { status: \"building\" });\n\n          // Ensure files are synced to disk\n          const files = await storage.getFilesByProjectId(deployment.projectId);\n          await fileSync.syncAllFiles(deployment.projectId, files.map(f => ({ path: f.path, content: f.content })));\n          \n          const projectDir = fileSync.getProjectDir(deployment.projectId);\n          \n          // Run build command if not vanilla\n          if (project.template !== 'vanilla-js') {\n            const sandbox = await storage.getSandboxByProjectId(deployment.projectId);\n            if (sandbox && sandbox.containerId && template.buildCommand) {\n              await dockerManager.execCommand(\n                sandbox.containerId,\n                template.buildCommand.split(' '),\n                (output) => console.log('Build:', output),\n                (error) => console.error('Build error:', error)\n              );\n            }\n          }\n          \n          // Determine build directory based on template\n          let buildDir = 'dist'; // default for Vite\n          if (project.template === 'next-static') {\n            buildDir = 'out';\n          } else if (project.template === 'vanilla-js') {\n            buildDir = '.';\n          }\n\n          const result = await netlifyDeploy.deploy({\n            projectPath: projectDir,\n            buildDir,\n            siteId: deployment.siteId || undefined,\n          });\n\n          await storage.updateDeployment(newDeployment.id, {\n            status: \"success\",\n            siteId: result.siteId,\n            deployUrl: result.deployUrl,\n          });\n        } catch (error: any) {\n          await storage.updateDeployment(newDeployment.id, {\n            status: \"failed\",\n            buildLog: error.message,\n          });\n        }\n      })();\n\n      res.json({ deploymentId: newDeployment.id, message: \"Rollback initiated\" });\n    } catch (error: any) {\n      console.error(\"Rollback error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Netlify deployment\n  app.post(\"/api/deploy/netlify\", requireAuth, async (req, res) => {\n    try {\n      const { projectId, siteId } = req.body;\n\n      if (!projectId) {\n        return res.status(400).json({ error: \"Project ID required\" });\n      }\n\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      \n      // Check ownership\n      if (project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      const template = templateConfigs[project.template as keyof typeof templateConfigs];\n      \n      // Create deployment record\n      const deployment = await storage.createDeployment({\n        projectId,\n        userId: req.user!.id,\n        siteId: siteId || null,\n        status: \"pending\",\n        deployUrl: null,\n        buildLog: null,\n      });\n\n      // Start deployment in background\n      (async () => {\n        try {\n          await storage.updateDeployment(deployment.id, { status: \"building\" });\n\n          // Ensure files are synced to disk\n          const files = await storage.getFilesByProjectId(projectId);\n          await fileSync.syncAllFiles(projectId, files.map(f => ({ path: f.path, content: f.content })));\n          \n          const projectDir = fileSync.getProjectDir(projectId);\n          \n          // Run build command if not vanilla\n          if (project.template !== 'vanilla-js') {\n            const sandbox = await storage.getSandboxByProjectId(projectId);\n            if (sandbox && sandbox.containerId && template.buildCommand) {\n              await dockerManager.execCommand(\n                sandbox.containerId,\n                template.buildCommand.split(' '),\n                (output) => console.log('Build:', output),\n                (error) => console.error('Build error:', error)\n              );\n            }\n          }\n          \n          // Determine build directory based on template\n          let buildDir = 'dist'; // default for Vite\n          if (project.template === 'next-static') {\n            buildDir = 'out';\n          } else if (project.template === 'vanilla-js') {\n            buildDir = '.';\n          }\n\n          const result = await netlifyDeploy.deploy({\n            projectPath: projectDir,\n            buildDir,\n            siteId: siteId || undefined,\n          });\n\n          await storage.updateDeployment(deployment.id, {\n            status: \"success\",\n            siteId: result.siteId,\n            deployUrl: result.deployUrl,\n          });\n        } catch (error: any) {\n          await storage.updateDeployment(deployment.id, {\n            status: \"failed\",\n            buildLog: error.message,\n          });\n        }\n      })();\n\n      res.json({ deploymentId: deployment.id, deployUrl: null });\n    } catch (error: any) {\n      console.error(\"Deploy error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Preview route\n  app.get(\"/preview/:projectId\", requireAuth, async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.projectId);\n      if (!project || project.userId !== req.user!.id) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n      \n      const sandbox = await storage.getSandboxByProjectId(req.params.projectId);\n      \n      if (!sandbox || !sandbox.port) {\n        return res.status(404).send(\"Preview not available. Start the dev server first.\");\n      }\n\n      // Proxy to the container's port\n      res.redirect(`http://localhost:${sandbox.port}`);\n    } catch (error: any) {\n      res.status(500).send(\"Preview error: \" + error.message);\n    }\n  });\n\n  // WebSocket server for terminal - handle routing manually\n  const wss = new WebSocketServer({ noServer: true });\n\n  httpServer.on('upgrade', (request, socket, head) => {\n    const url = request.url || '';\n    \n    if (url.startsWith('/ws/terminal/')) {\n      // Parse session to authenticate WebSocket connection\n      const sessionParser = app.get('sessionParser'); // We'll set this below\n      sessionParser(request as any, {} as any, async () => {\n        const session = (request as any).session;\n        \n        if (!session || !session.userId) {\n          socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n');\n          socket.destroy();\n          return;\n        }\n\n        // Extract project ID and verify ownership\n        const match = url.match(/\\/ws\\/terminal\\/([^/?]+)/);\n        const projectId = match ? match[1] : null;\n        \n        if (!projectId) {\n          socket.write('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n          socket.destroy();\n          return;\n        }\n\n        const project = await storage.getProject(projectId);\n        if (!project || project.userId !== session.userId) {\n          socket.write('HTTP/1.1 403 Forbidden\\r\\n\\r\\n');\n          socket.destroy();\n          return;\n        }\n\n        wss.handleUpgrade(request, socket, head, (ws) => {\n          wss.emit('connection', ws, request);\n        });\n      });\n    } else {\n      socket.destroy();\n    }\n  });\n\n  wss.on('connection', (ws: WebSocket, req) => {\n    const url = req.url || '';\n    const match = url.match(/\\/ws\\/terminal\\/([^/?]+)/);\n    const projectId = match ? match[1] : null;\n    \n    if (!projectId) {\n      ws.send('Invalid project ID\\r\\n');\n      ws.close();\n      return;\n    }\n\n    // Handle terminal WebSocket (already authenticated in upgrade)\n    (async () => {\n      try {\n        let sandbox = await storage.getSandboxByProjectId(projectId);\n        \n        if (!sandbox) {\n          ws.send('No sandbox running. Use the Run buttons to start.\\r\\n');\n          return;\n        }\n\n        if (!sandbox.containerId) {\n          ws.send('Container not available\\r\\n');\n          return;\n        }\n\n        const container = await dockerManager.docker.getContainer(sandbox.containerId);\n        const exec = await container.exec({\n          Cmd: ['/bin/sh'],\n          AttachStdin: true,\n          AttachStdout: true,\n          AttachStderr: true,\n          Tty: true,\n        });\n\n        const stream = await exec.start({\n          Tty: true,\n          stdin: true,\n        });\n\n        // Container output -> WebSocket\n        stream.on('data', (chunk: Buffer) => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.send(chunk.toString());\n          }\n        });\n\n        // WebSocket input -> Container\n        ws.on('message', (data: Buffer) => {\n          stream.write(data);\n        });\n\n        ws.on('close', () => {\n          stream.end();\n        });\n\n        stream.on('end', () => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.close();\n          }\n        });\n\n        // Update sandbox activity\n        await storage.updateSandbox(sandbox.id, {\n          lastActivity: new Date(),\n        });\n      } catch (error: any) {\n        ws.send(`Terminal error: ${error.message}\\r\\n`);\n      }\n    })();\n  });\n\n  // Sandbox cleanup job (run every 30 seconds)\n  setInterval(async () => {\n    const now = Date.now();\n    const sandboxes = await storage.getAllSandboxes();\n    \n    for (const sandbox of sandboxes) {\n      const idleTime = now - sandbox.lastActivity.getTime();\n      \n      // Kill if idle > 60 seconds or runtime > 120 seconds\n      const maxIdleTime = 60 * 1000;\n      const maxRuntime = 120 * 1000;\n      const runtime = now - sandbox.createdAt.getTime();\n      \n      if (idleTime > maxIdleTime || runtime > maxRuntime) {\n        if (sandbox.containerId) {\n          await dockerManager.stopContainer(sandbox.containerId);\n        }\n        await storage.deleteSandbox(sandbox.id);\n        console.log(`Cleaned up sandbox ${sandbox.id}`);\n      }\n    }\n  }, 30000);\n\n  return httpServer;\n}\n","size_bytes":23559},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/docker-manager.ts":{"content":"import Docker from 'dockerode';\nimport { randomUUID } from 'crypto';\n\nconst docker = new Docker();\n\nexport interface SandboxConfig {\n  projectId: string;\n  userId: string;\n  workingDir: string;\n  cpus: number;\n  memory: number; // in MB\n  pidsLimit: number;\n}\n\nexport class DockerManager {\n  public docker: Docker;\n\n  constructor() {\n    this.docker = docker;\n  }\n\n  async createSandbox(config: SandboxConfig): Promise<{\n    containerId: string;\n    port: number;\n  }> {\n    const containerName = `sandbox-${config.projectId}-${randomUUID().slice(0, 8)}`;\n    \n    // Random port range for dev servers (one port for all common dev server ports)\n    const hostPort = Math.floor(Math.random() * (8999 - 8000 + 1)) + 8000;\n\n    const container = await docker.createContainer({\n      Image: 'node:20-alpine',\n      name: containerName,\n      Cmd: ['/bin/sh'],\n      Tty: true,\n      OpenStdin: true,\n      AttachStdin: true,\n      AttachStdout: true,\n      AttachStderr: true,\n      WorkingDir: '/workspace',\n      HostConfig: {\n        Binds: [`${config.workingDir}:/workspace`],\n        AutoRemove: true,\n        CpuQuota: config.cpus * 100000, // 0.5 CPU = 50000\n        Memory: config.memory * 1024 * 1024,\n        PidsLimit: config.pidsLimit,\n        PortBindings: {\n          // Map common dev server ports to same host port (app will bind to one)\n          '5173/tcp': [{ HostPort: hostPort.toString() }],\n          '3000/tcp': [{ HostPort: (hostPort + 1).toString() }],\n          '8000/tcp': [{ HostPort: (hostPort + 2).toString() }],\n        },\n      },\n      ExposedPorts: {\n        '5173/tcp': {},\n        '3000/tcp': {},\n        '8000/tcp': {},\n      },\n      User: 'node', // Run as non-root\n    });\n\n    await container.start();\n\n    return {\n      containerId: container.id,\n      port: hostPort, // Return the base port (5173 maps here)\n    };\n  }\n\n  async execCommand(\n    containerId: string,\n    command: string[],\n    onOutput: (data: string) => void,\n    onError?: (data: string) => void\n  ): Promise<void> {\n    const container = docker.getContainer(containerId);\n\n    const exec = await container.exec({\n      Cmd: command,\n      AttachStdout: true,\n      AttachStderr: true,\n      Tty: false,\n    });\n\n    const stream = await exec.start({ Tty: false, stdin: false });\n\n    stream.on('data', (chunk: Buffer) => {\n      // Docker multiplexes stdout/stderr, first byte indicates stream type\n      const data = chunk.toString('utf8');\n      onOutput(data);\n    });\n\n    stream.on('error', (error: Error) => {\n      if (onError) onError(error.message);\n    });\n\n    return new Promise((resolve) => {\n      stream.on('end', resolve);\n    });\n  }\n\n  async stopContainer(containerId: string): Promise<void> {\n    try {\n      const container = docker.getContainer(containerId);\n      await container.stop();\n    } catch (error) {\n      console.error('Error stopping container:', error);\n    }\n  }\n\n  async removeContainer(containerId: string): Promise<void> {\n    try {\n      const container = docker.getContainer(containerId);\n      await container.remove({ force: true });\n    } catch (error) {\n      console.error('Error removing container:', error);\n    }\n  }\n\n  async getContainerStats(containerId: string): Promise<any> {\n    const container = docker.getContainer(containerId);\n    const stats = await container.stats({ stream: false });\n    return stats;\n  }\n}\n\nexport const dockerManager = new DockerManager();\n","size_bytes":3431},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Project,\n  type InsertProject,\n  type File,\n  type InsertFile,\n  type Sandbox,\n  type InsertSandbox,\n  type AiInteraction,\n  type InsertAiInteraction,\n  type Deployment,\n  type InsertDeployment,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Projects\n  getProject(id: string): Promise<Project | undefined>;\n  getProjectsByUserId(userId: string): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, data: Partial<Project>): Promise<Project>;\n  deleteProject(id: string): Promise<void>;\n\n  // Files\n  getFile(id: string): Promise<File | undefined>;\n  getFilesByProjectId(projectId: string): Promise<File[]>;\n  getFileByPath(projectId: string, path: string): Promise<File | undefined>;\n  createFile(file: InsertFile): Promise<File>;\n  updateFile(id: string, content: string): Promise<File>;\n  updateFileByPath(projectId: string, path: string, content: string): Promise<File>;\n  deleteFile(id: string): Promise<void>;\n  deleteFileByPath(projectId: string, path: string): Promise<void>;\n\n  // Sandboxes\n  getSandbox(id: string): Promise<Sandbox | undefined>;\n  getSandboxByProjectId(projectId: string): Promise<Sandbox | undefined>;\n  getSandboxByUserId(userId: string): Promise<Sandbox | undefined>;\n  createSandbox(sandbox: InsertSandbox): Promise<Sandbox>;\n  updateSandbox(id: string, data: Partial<Sandbox>): Promise<Sandbox>;\n  deleteSandbox(id: string): Promise<void>;\n\n  // AI Interactions\n  createAiInteraction(interaction: InsertAiInteraction): Promise<AiInteraction>;\n  getAiInteractionsByProjectId(projectId: string): Promise<AiInteraction[]>;\n\n  // Deployments\n  createDeployment(deployment: InsertDeployment): Promise<Deployment>;\n  getDeployment(id: string): Promise<Deployment | null>;\n  getDeploymentsByProjectId(projectId: string): Promise<Deployment[]>;\n  updateDeployment(id: string, data: Partial<Deployment>): Promise<Deployment>;\n\n  // Sandbox utilities\n  getAllSandboxes(): Promise<Sandbox[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private projects: Map<string, Project>;\n  private files: Map<string, File>;\n  private sandboxes: Map<string, Sandbox>;\n  private aiInteractions: Map<string, AiInteraction>;\n  private deployments: Map<string, Deployment>;\n\n  constructor() {\n    this.users = new Map();\n    this.projects = new Map();\n    this.files = new Map();\n    this.sandboxes = new Map();\n    this.aiInteractions = new Map();\n    this.deployments = new Map();\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find((user) => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      passwordHash: insertUser.passwordHash || null,\n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Projects\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async getProjectsByUserId(userId: string): Promise<Project[]> {\n    return Array.from(this.projects.values()).filter((p) => p.userId === userId);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const now = new Date();\n    const project: Project = {\n      ...insertProject,\n      description: insertProject.description ?? null,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, data: Partial<Project>): Promise<Project> {\n    const project = this.projects.get(id);\n    if (!project) throw new Error(\"Project not found\");\n    const updated = { ...project, ...data, updatedAt: new Date() };\n    this.projects.set(id, updated);\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    this.projects.delete(id);\n    // Also delete related files\n    Array.from(this.files.entries())\n      .filter(([, file]) => file.projectId === id)\n      .forEach(([fileId]) => this.files.delete(fileId));\n  }\n\n  // Files\n  async getFile(id: string): Promise<File | undefined> {\n    return this.files.get(id);\n  }\n\n  async getFilesByProjectId(projectId: string): Promise<File[]> {\n    return Array.from(this.files.values()).filter((f) => f.projectId === projectId);\n  }\n\n  async getFileByPath(projectId: string, path: string): Promise<File | undefined> {\n    return Array.from(this.files.values()).find(\n      (f) => f.projectId === projectId && f.path === path\n    );\n  }\n\n  async createFile(insertFile: InsertFile): Promise<File> {\n    const id = randomUUID();\n    const now = new Date();\n    const file: File = {\n      ...insertFile,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.files.set(id, file);\n    return file;\n  }\n\n  async updateFile(id: string, content: string): Promise<File> {\n    const file = this.files.get(id);\n    if (!file) throw new Error(\"File not found\");\n    const updated = { ...file, content, updatedAt: new Date() };\n    this.files.set(id, updated);\n    return updated;\n  }\n\n  async updateFileByPath(projectId: string, path: string, content: string): Promise<File> {\n    const file = await this.getFileByPath(projectId, path);\n    if (!file) throw new Error(\"File not found\");\n    const updated = { ...file, content, updatedAt: new Date() };\n    this.files.set(file.id, updated);\n    return updated;\n  }\n\n  async deleteFile(id: string): Promise<void> {\n    this.files.delete(id);\n  }\n\n  async deleteFileByPath(projectId: string, path: string): Promise<void> {\n    const file = await this.getFileByPath(projectId, path);\n    if (file) this.files.delete(file.id);\n  }\n\n  // Sandboxes\n  async getSandbox(id: string): Promise<Sandbox | undefined> {\n    return this.sandboxes.get(id);\n  }\n\n  async getSandboxByProjectId(projectId: string): Promise<Sandbox | undefined> {\n    return Array.from(this.sandboxes.values()).find((s) => s.projectId === projectId);\n  }\n\n  async getSandboxByUserId(userId: string): Promise<Sandbox | undefined> {\n    return Array.from(this.sandboxes.values()).find((s) => s.userId === userId);\n  }\n\n  async createSandbox(insertSandbox: InsertSandbox): Promise<Sandbox> {\n    const id = randomUUID();\n    const sandbox: Sandbox = {\n      ...insertSandbox,\n      containerId: insertSandbox.containerId ?? null,\n      port: insertSandbox.port ?? null,\n      lastActivity: insertSandbox.lastActivity ?? new Date(),\n      id,\n      createdAt: new Date(),\n    };\n    this.sandboxes.set(id, sandbox);\n    return sandbox;\n  }\n\n  async updateSandbox(id: string, data: Partial<Sandbox>): Promise<Sandbox> {\n    const sandbox = this.sandboxes.get(id);\n    if (!sandbox) throw new Error(\"Sandbox not found\");\n    const updated = { ...sandbox, ...data };\n    this.sandboxes.set(id, updated);\n    return updated;\n  }\n\n  async deleteSandbox(id: string): Promise<void> {\n    this.sandboxes.delete(id);\n  }\n\n  // AI Interactions\n  async createAiInteraction(insertInteraction: InsertAiInteraction): Promise<AiInteraction> {\n    const id = randomUUID();\n    const interaction: AiInteraction = {\n      ...insertInteraction,\n      projectId: insertInteraction.projectId ?? null,\n      response: insertInteraction.response ?? null,\n      filePath: insertInteraction.filePath ?? null,\n      id,\n      createdAt: new Date(),\n    };\n    this.aiInteractions.set(id, interaction);\n    return interaction;\n  }\n\n  async getAiInteractionsByProjectId(projectId: string): Promise<AiInteraction[]> {\n    return Array.from(this.aiInteractions.values()).filter(\n      (i) => i.projectId === projectId\n    );\n  }\n\n  // Deployments\n  async createDeployment(insertDeployment: InsertDeployment): Promise<Deployment> {\n    const id = randomUUID();\n    const deployment: Deployment = {\n      ...insertDeployment,\n      siteId: insertDeployment.siteId ?? null,\n      deployUrl: insertDeployment.deployUrl ?? null,\n      buildLog: insertDeployment.buildLog ?? null,\n      id,\n      createdAt: new Date(),\n    };\n    this.deployments.set(id, deployment);\n    return deployment;\n  }\n\n  async getDeployment(id: string): Promise<Deployment | null> {\n    return this.deployments.get(id) || null;\n  }\n\n  async getDeploymentsByProjectId(projectId: string): Promise<Deployment[]> {\n    return Array.from(this.deployments.values()).filter((d) => d.projectId === projectId);\n  }\n\n  async updateDeployment(id: string, data: Partial<Deployment>): Promise<Deployment> {\n    const deployment = this.deployments.get(id);\n    if (!deployment) throw new Error(\"Deployment not found\");\n    const updated = { ...deployment, ...data };\n    this.deployments.set(id, updated);\n    return updated;\n  }\n\n  async getAllSandboxes(): Promise<Sandbox[]> {\n    return Array.from(this.sandboxes.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9240},"replit.md":{"content":"# Web IDE - Replit-lite with Local AI and Docker Sandboxes\n\n## Overview\n\nA production-grade web-based IDE that provides users with isolated Docker sandbox environments for running code projects, integrated AI assistance via local Ollama models, and one-click deployment to Netlify. The application features a Monaco-based code editor, real-time terminal access, file management, and live preview capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Core Technology**: React with TypeScript, using Vite as the build tool and bundler.\n\n**UI Framework**: Utilizes shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling. The design system follows a dark-first approach optimized for development workflows, drawing inspiration from VS Code, Linear, and Replit.\n\n**State Management**: \n- TanStack Query (React Query) for server state management and API caching\n- Local React state for UI interactions\n- Custom hooks for mobile detection and toast notifications\n\n**Routing**: Wouter for lightweight client-side routing with two main routes:\n- Dashboard (`/`) - Project listing and creation\n- Editor (`/p/:id`) - Main IDE interface\n\n**Key UI Components**:\n- Monaco Editor for code editing with syntax highlighting and TypeScript support\n- xterm.js for terminal emulation with WebSocket connectivity\n- Custom file tree with context menus for file operations\n- AI panel for code assistance with model selection\n- Live preview iframe for running applications\n\n### Backend Architecture\n\n**Core Technology**: Express.js with TypeScript running on Node.js 20+\n\n**API Design**: RESTful endpoints with WebSocket support for real-time features:\n- `/api/projects` - Project CRUD operations\n- `/api/projects/:id/files` - File management\n- `/api/ai/complete` - AI code assistance\n- `/api/deploy` - Netlify deployment\n- WebSocket `/terminals/:projectId` - Interactive terminal sessions\n\n**Storage Strategy**: PostgreSQL database with Drizzle ORM for data persistence. All users, projects, files, sandboxes, AI interactions, and deployments are stored in the database. File content is also synced to disk at `/tmp/webide-projects` for Docker bind-mounts and builds.\n\n**Docker Integration**:\n- DockerManager class orchestrates sandbox containers\n- Each project runs in isolated Node.js 20 Alpine containers\n- Resource limits: 0.5 CPU, 512MB RAM, 256 PID limit\n- Auto-remove containers on exit\n- Volume mounts project directories to `/workspace`\n- Port mapping for dev servers (8000-8999 range)\n\n**Security Model**:\n- Sandboxes run with resource constraints\n- Only project directories are mounted (read-write)\n- Containers are ephemeral and auto-cleaned\n- PostgreSQL database for persistent user data\n- Demo user auto-created for MVP testing (email: demo@webide.dev)\n\n### Data Models\n\n**User Schema**:\n- id, email, username, createdAt\n- Demo user created on startup\n\n**Project Schema**:\n- id, userId, name, template, description, timestamps\n- Templates: vite-react-ts, next-static, vanilla-js\n\n**File Schema**:\n- id, projectId, path, content, timestamps\n- Hierarchical path structure (e.g., 'src/App.tsx')\n\n**Sandbox Schema**:\n- id, projectId, userId, containerId, port, status, timestamps\n- Tracks active Docker containers per project\n\n**Deployment Schema**:\n- id, projectId, siteId, deployUrl, status, timestamps\n- Records Netlify deployment history\n\n**AI Interaction Schema**:\n- id, projectId, model, prompt, response, timestamps\n- Logs AI assistance requests\n\n### External Dependencies\n\n**Docker**: Required for sandbox execution. The application communicates with Docker daemon via dockerode library to create, manage, and destroy containers.\n\n**Ollama AI Service**:\n- Local LLM server running on http://localhost:11434\n- Supported models: Qwen2.5-Coder (7B), CodeLlama (7B), DeepSeek Coder (6.7B)\n- Non-blocking AI requests with 2-minute timeout\n- Health check endpoint for service availability\n- Optional but recommended for AI features\n\n**Netlify API**:\n- Deployment via REST API at https://api.netlify.com/api/v1\n- Requires NETLIFY_ACCESS_TOKEN environment variable\n- Creates zip archives of build directories\n- Returns site URLs and deployment status\n- Site creation and update operations\n\n**PostgreSQL Database**:\n- Production database with Drizzle ORM\n- Connection via DATABASE_URL environment variable\n- Tables: users, projects, files, sandboxes, ai_interactions, deployments\n- File content synced to disk for Docker mounts\n\n**WebSocket Communication**:\n- 'ws' library for WebSocket server\n- Bidirectional streaming for terminal I/O\n- Connects browser terminal (xterm.js) to Docker container shell\n- Real-time log streaming from sandbox execution\n\n**Development Tools**:\n- Vite dev server with HMR in development\n- ESBuild for production bundling\n- Replit-specific plugins for development experience\n- TypeScript for type safety across stack","size_bytes":4950},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/ollama-client.ts":{"content":"import axios from 'axios';\n\nconst OLLAMA_BASE_URL = process.env.OLLAMA_BASE_URL || 'http://localhost:11434';\n\nexport interface OllamaRequest {\n  model: string;\n  prompt: string;\n  stream?: boolean;\n}\n\nexport interface OllamaResponse {\n  model: string;\n  response: string;\n  done: boolean;\n}\n\nexport class OllamaClient {\n  async generate(request: OllamaRequest): Promise<string> {\n    try {\n      const response = await axios.post<OllamaResponse>(\n        `${OLLAMA_BASE_URL}/api/generate`,\n        {\n          ...request,\n          stream: false,\n        },\n        {\n          timeout: 120000, // 2 minute timeout\n        }\n      );\n\n      return response.data.response;\n    } catch (error: any) {\n      console.error('Ollama error:', error.message);\n      throw new Error(`AI generation failed: ${error.message}`);\n    }\n  }\n\n  async listModels(): Promise<string[]> {\n    try {\n      const response = await axios.get(`${OLLAMA_BASE_URL}/api/tags`);\n      return response.data.models?.map((m: any) => m.name) || [];\n    } catch (error) {\n      console.error('Failed to list Ollama models:', error);\n      return [];\n    }\n  }\n\n  async checkHealth(): Promise<boolean> {\n    try {\n      await axios.get(`${OLLAMA_BASE_URL}/api/tags`, { timeout: 5000 });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\nexport const ollamaClient = new OllamaClient();\n","size_bytes":1375},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  username: text(\"username\").notNull().unique(),\n  passwordHash: text(\"password_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  template: text(\"template\").notNull(), // 'vite-react-ts' | 'next-static' | 'vanilla-js'\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\n// Files table\nexport const files = pgTable(\"files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  path: text(\"path\").notNull(), // e.g., 'src/App.tsx' or 'package.json'\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertFileSchema = createInsertSchema(files).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertFile = z.infer<typeof insertFileSchema>;\nexport type File = typeof files.$inferSelect;\n\n// Sandboxes table - tracks running containers\nexport const sandboxes = pgTable(\"sandboxes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  containerId: text(\"container_id\"), // Docker container ID\n  status: text(\"status\").notNull(), // 'running' | 'stopped' | 'idle'\n  port: integer(\"port\"), // Exposed port for preview\n  lastActivity: timestamp(\"last_activity\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertSandboxSchema = createInsertSchema(sandboxes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertSandbox = z.infer<typeof insertSandboxSchema>;\nexport type Sandbox = typeof sandboxes.$inferSelect;\n\n// AI Interactions table\nexport const aiInteractions = pgTable(\"ai_interactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  projectId: varchar(\"project_id\").references(() => projects.id, { onDelete: \"cascade\" }),\n  model: text(\"model\").notNull(), // 'qwen2.5-coder:7b' | 'codellama:7b' etc.\n  prompt: text(\"prompt\").notNull(),\n  response: text(\"response\"),\n  filePath: text(\"file_path\"), // Context file\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertAiInteractionSchema = createInsertSchema(aiInteractions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAiInteraction = z.infer<typeof insertAiInteractionSchema>;\nexport type AiInteraction = typeof aiInteractions.$inferSelect;\n\n// Deployments table\nexport const deployments = pgTable(\"deployments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  siteId: text(\"site_id\"), // Netlify site ID\n  deployUrl: text(\"deploy_url\"), // Deployed URL\n  status: text(\"status\").notNull(), // 'pending' | 'building' | 'success' | 'failed'\n  buildLog: text(\"build_log\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertDeploymentSchema = createInsertSchema(deployments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertDeployment = z.infer<typeof insertDeploymentSchema>;\nexport type Deployment = typeof deployments.$inferSelect;\n\n// Template configurations\nexport const templateConfigs = {\n  'vite-react-ts': {\n    name: 'Vite + React + TypeScript',\n    description: 'Modern React app with Vite bundler and TypeScript',\n    devCommand: 'npm run dev',\n    buildCommand: 'npm run build',\n    installCommand: 'npm ci',\n    defaultPort: 5173,\n    files: {\n      'package.json': JSON.stringify({\n        name: 'vite-react-app',\n        version: '0.0.0',\n        type: 'module',\n        scripts: {\n          dev: 'vite --host 0.0.0.0 --port 5173',\n          build: 'tsc && vite build',\n          preview: 'vite preview',\n        },\n        dependencies: {\n          react: '^18.2.0',\n          'react-dom': '^18.2.0',\n        },\n        devDependencies: {\n          '@types/react': '^18.2.0',\n          '@types/react-dom': '^18.2.0',\n          '@vitejs/plugin-react': '^4.0.0',\n          typescript: '^5.0.0',\n          vite: '^5.0.0',\n        },\n      }, null, 2),\n      'index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>`,\n      'src/main.tsx': `import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)`,\n      'src/App.tsx': `function App() {\n  return (\n    <div className=\"app\">\n      <h1>Hello from Vite + React + TypeScript!</h1>\n      <p>Start editing to see changes.</p>\n    </div>\n  )\n}\n\nexport default App`,\n      'src/index.css': `body {\n  margin: 0;\n  font-family: system-ui, -apple-system, sans-serif;\n  display: flex;\n  place-items: center;\n  min-height: 100vh;\n  background: #242424;\n  color: #fff;\n}\n\n.app {\n  text-align: center;\n  padding: 2rem;\n}`,\n      'tsconfig.json': JSON.stringify({\n        compilerOptions: {\n          target: 'ES2020',\n          useDefineForClassFields: true,\n          lib: ['ES2020', 'DOM', 'DOM.Iterable'],\n          module: 'ESNext',\n          skipLibCheck: true,\n          moduleResolution: 'bundler',\n          allowImportingTsExtensions: true,\n          resolveJsonModule: true,\n          isolatedModules: true,\n          noEmit: true,\n          jsx: 'react-jsx',\n          strict: true,\n          noUnusedLocals: true,\n          noUnusedParameters: true,\n          noFallthroughCasesInSwitch: true,\n        },\n        include: ['src'],\n      }, null, 2),\n      'vite.config.ts': `import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n    port: 5173,\n  },\n})`,\n    },\n  },\n  'next-static': {\n    name: 'Next.js (Static Export)',\n    description: 'Next.js app with static site generation',\n    devCommand: 'npm run dev',\n    buildCommand: 'npm run build',\n    installCommand: 'npm ci',\n    defaultPort: 3000,\n    files: {\n      'package.json': JSON.stringify({\n        name: 'next-static-app',\n        version: '0.1.0',\n        scripts: {\n          dev: 'next dev -H 0.0.0.0 -p 3000',\n          build: 'next build',\n          start: 'next start',\n        },\n        dependencies: {\n          next: '^14.0.0',\n          react: '^18.2.0',\n          'react-dom': '^18.2.0',\n        },\n        devDependencies: {\n          '@types/node': '^20.0.0',\n          '@types/react': '^18.2.0',\n          '@types/react-dom': '^18.2.0',\n          typescript: '^5.0.0',\n        },\n      }, null, 2),\n      'next.config.js': `/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export',\n}\n\nmodule.exports = nextConfig`,\n      'app/page.tsx': `export default function Home() {\n  return (\n    <main style={{ padding: '2rem', fontFamily: 'system-ui' }}>\n      <h1>Hello from Next.js Static!</h1>\n      <p>This is a static export configuration.</p>\n    </main>\n  )\n}`,\n      'app/layout.tsx': `export default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}`,\n      'tsconfig.json': JSON.stringify({\n        compilerOptions: {\n          lib: ['dom', 'dom.iterable', 'esnext'],\n          allowJs: true,\n          skipLibCheck: true,\n          strict: true,\n          noEmit: true,\n          esModuleInterop: true,\n          module: 'esnext',\n          moduleResolution: 'bundler',\n          resolveJsonModule: true,\n          isolatedModules: true,\n          jsx: 'preserve',\n          incremental: true,\n          paths: {\n            '@/*': ['./*'],\n          },\n        },\n        include: ['next-env.d.ts', '**/*.ts', '**/*.tsx'],\n        exclude: ['node_modules'],\n      }, null, 2),\n    },\n  },\n  'vanilla-js': {\n    name: 'Vanilla JavaScript',\n    description: 'Plain HTML, CSS, and JavaScript',\n    devCommand: 'python3 -m http.server 8000',\n    buildCommand: 'echo \"No build step needed\"',\n    installCommand: 'echo \"No dependencies to install\"',\n    defaultPort: 8000,\n    files: {\n      'index.html': `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Vanilla JS App</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div id=\"app\">\n    <h1>Hello from Vanilla JavaScript!</h1>\n    <p>Edit the files to see changes.</p>\n    <button id=\"btn\">Click me</button>\n    <p id=\"output\"></p>\n  </div>\n  <script src=\"script.js\"></script>\n</body>\n</html>`,\n      'style.css': `body {\n  margin: 0;\n  font-family: system-ui, -apple-system, sans-serif;\n  display: flex;\n  place-items: center;\n  min-height: 100vh;\n  background: #242424;\n  color: #fff;\n}\n\n#app {\n  text-align: center;\n  padding: 2rem;\n}\n\nbutton {\n  padding: 0.5rem 1rem;\n  font-size: 1rem;\n  cursor: pointer;\n  background: #646cff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  margin-top: 1rem;\n}\n\nbutton:hover {\n  background: #535bf2;\n}`,\n      'script.js': `document.getElementById('btn').addEventListener('click', function() {\n  document.getElementById('output').textContent = 'Button clicked! ' + new Date().toLocaleTimeString();\n});`,\n    },\n  },\n} as const;\n\nexport type TemplateType = keyof typeof templateConfigs;\n","size_bytes":11148},"client/src/components/editor/monaco-editor.tsx":{"content":"import { Editor } from \"@monaco-editor/react\"\nimport { useTheme } from \"@/components/theme-provider\"\n\ninterface MonacoEditorProps {\n  value: string\n  onChange: (value: string | undefined) => void\n  language: string\n  path: string\n}\n\nexport function MonacoEditor({ value, onChange, language, path }: MonacoEditorProps) {\n  const { theme } = useTheme()\n\n  return (\n    <Editor\n      height=\"100%\"\n      language={language}\n      value={value}\n      onChange={onChange}\n      theme={theme === \"dark\" ? \"vs-dark\" : \"light\"}\n      path={path}\n      options={{\n        minimap: { enabled: true },\n        fontSize: 14,\n        fontFamily: \"'JetBrains Mono', 'Fira Code', monospace\",\n        lineHeight: 20,\n        padding: { top: 16, bottom: 16 },\n        scrollBeyondLastLine: false,\n        automaticLayout: true,\n        tabSize: 2,\n        wordWrap: \"on\",\n      }}\n    />\n  )\n}\n","size_bytes":877},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/editor/ai-panel.tsx":{"content":"import { useState } from \"react\"\nimport { useMutation } from \"@tanstack/react-query\"\nimport { Sparkles, Send, Copy, RotateCw, CheckCircle } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { apiRequest } from \"@/lib/queryClient\"\n\ninterface Message {\n  role: 'user' | 'assistant'\n  content: string\n}\n\ninterface AiPanelProps {\n  projectId: string\n  currentFile: string | null\n  currentContent: string\n  onApplyPatch: (content: string) => void\n}\n\nconst models = [\n  { value: 'qwen2.5-coder:7b', label: 'Qwen2.5-Coder 7B' },\n  { value: 'codellama:7b', label: 'CodeLlama 7B' },\n  { value: 'deepseek-coder:6.7b', label: 'DeepSeek Coder 6.7B' },\n]\n\nexport function AiPanel({ projectId, currentFile, currentContent, onApplyPatch }: AiPanelProps) {\n  const [messages, setMessages] = useState<Message[]>([])\n  const [input, setInput] = useState('')\n  const [model, setModel] = useState('qwen2.5-coder:7b')\n  const [mode, setMode] = useState<'explain' | 'refactor' | 'generate'>('explain')\n  const { toast } = useToast()\n\n  const aiMutation = useMutation({\n    mutationFn: async (data: { prompt: string; model: string; filePath?: string; content?: string }) => {\n      return apiRequest('POST', '/api/ai/complete', data)\n    },\n    onSuccess: (data: any) => {\n      setMessages(prev => [...prev, { role: 'assistant', content: data.response }])\n    },\n    onError: () => {\n      toast({\n        title: \"AI Error\",\n        description: \"Failed to get AI response. Make sure Ollama is running.\",\n        variant: \"destructive\",\n      })\n    },\n  })\n\n  const handleSend = () => {\n    if (!input.trim()) return\n\n    const userMessage = input\n    setMessages(prev => [...prev, { role: 'user', content: userMessage }])\n    setInput('')\n\n    const prompt = mode === 'explain' \n      ? `Explain this code:\\n\\n${currentContent}\\n\\nQuestion: ${userMessage}`\n      : mode === 'refactor'\n      ? `Refactor this code:\\n\\n${currentContent}\\n\\nRequirements: ${userMessage}`\n      : `Generate code: ${userMessage}`\n\n    aiMutation.mutate({\n      prompt,\n      model,\n      filePath: currentFile || undefined,\n      content: currentContent || undefined,\n    })\n  }\n\n  const handleCopy = (content: string) => {\n    navigator.clipboard.writeText(content)\n    toast({ title: \"Copied to clipboard\" })\n  }\n\n  return (\n    <div className=\"flex flex-col h-full bg-card border-l border-card-border\" style={{ width: '400px' }}>\n      <div className=\"p-4 border-b border-border bg-sidebar\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <Sparkles className=\"h-5 w-5 text-ai-accent\" />\n          <h3 className=\"text-sm font-semibold\" data-testid=\"text-ai-assistant\">AI Assistant</h3>\n        </div>\n        \n        <Select value={model} onValueChange={setModel}>\n          <SelectTrigger data-testid=\"select-model\">\n            <SelectValue placeholder=\"Select model\" />\n          </SelectTrigger>\n          <SelectContent>\n            {models.map(m => (\n              <SelectItem key={m.value} value={m.value} data-testid={`model-${m.value}`}>\n                {m.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <Tabs value={mode} onValueChange={(v) => setMode(v as any)} className=\"mt-3\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"explain\" data-testid=\"tab-explain\">Explain</TabsTrigger>\n            <TabsTrigger value=\"refactor\" data-testid=\"tab-refactor\">Refactor</TabsTrigger>\n            <TabsTrigger value=\"generate\" data-testid=\"tab-generate\">Generate</TabsTrigger>\n          </TabsList>\n        </Tabs>\n      </div>\n\n      <ScrollArea className=\"flex-1 p-4\">\n        {messages.length === 0 ? (\n          <div className=\"text-center text-muted-foreground py-12\" data-testid=\"text-ai-empty\">\n            <Sparkles className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n            <p className=\"text-sm\">Ask AI to help with your code</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {messages.map((msg, i) => (\n              <div\n                key={i}\n                className={`p-3 rounded-lg ${\n                  msg.role === 'user'\n                    ? 'bg-primary/10 ml-4'\n                    : 'bg-ai-accent/10 mr-4'\n                }`}\n                data-testid={`message-${i}`}\n              >\n                <p className=\"text-sm font-medium mb-1 capitalize\">{msg.role}</p>\n                <p className=\"text-sm whitespace-pre-wrap\">{msg.content}</p>\n                {msg.role === 'assistant' && (\n                  <div className=\"flex gap-2 mt-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleCopy(msg.content)}\n                      data-testid={`button-copy-${i}`}\n                    >\n                      <Copy className=\"h-3 w-3 mr-1\" />\n                      Copy\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onApplyPatch(msg.content)}\n                      data-testid={`button-apply-${i}`}\n                    >\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\n                      Apply\n                    </Button>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </ScrollArea>\n\n      <div className=\"p-4 border-t border-border bg-sidebar\">\n        <div className=\"flex gap-2\">\n          <Textarea\n            placeholder={\n              mode === 'explain'\n                ? 'Ask about the code...'\n                : mode === 'refactor'\n                ? 'How should we refactor?'\n                : 'What should we generate?'\n            }\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault()\n                handleSend()\n              }\n            }}\n            className=\"min-h-[60px] resize-none\"\n            data-testid=\"textarea-ai-input\"\n          />\n          <Button\n            size=\"icon\"\n            onClick={handleSend}\n            disabled={aiMutation.isPending || !input.trim()}\n            data-testid=\"button-send-ai\"\n            aria-label=\"Send message\"\n          >\n            {aiMutation.isPending ? (\n              <RotateCw className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Send className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":6995},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"server/netlify-deploy.ts":{"content":"import axios from 'axios';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport FormData from 'form-data';\nimport archiver from 'archiver';\nimport { createWriteStream } from 'fs';\n\nconst NETLIFY_API_URL = 'https://api.netlify.com/api/v1';\nconst NETLIFY_TOKEN = process.env.NETLIFY_ACCESS_TOKEN;\n\nexport interface DeployConfig {\n  projectPath: string;\n  buildDir: string; // e.g., 'dist' or 'out' or '.'\n  siteId?: string;\n}\n\nexport class NetlifyDeploy {\n  async deploy(config: DeployConfig): Promise<{\n    siteId: string;\n    deployUrl: string;\n    siteUrl: string;\n  }> {\n    if (!NETLIFY_TOKEN) {\n      throw new Error('NETLIFY_ACCESS_TOKEN not configured');\n    }\n\n    const headers = {\n      Authorization: `Bearer ${NETLIFY_TOKEN}`,\n    };\n\n    // Create or get site\n    let siteId = config.siteId;\n    if (!siteId) {\n      const site = await axios.post(\n        `${NETLIFY_API_URL}/sites`,\n        {},\n        { headers }\n      );\n      siteId = site.data.id;\n    }\n\n    // Create zip of build directory\n    const buildPath = path.join(config.projectPath, config.buildDir);\n    const zipPath = path.join(config.projectPath, 'deploy.zip');\n    \n    await this.zipDirectory(buildPath, zipPath);\n\n    // Upload zip to Netlify\n    const zipBuffer = await fs.readFile(zipPath);\n    \n    const deployResponse = await axios.post(\n      `${NETLIFY_API_URL}/sites/${siteId}/deploys`,\n      zipBuffer,\n      {\n        headers: {\n          ...headers,\n          'Content-Type': 'application/zip',\n        },\n      }\n    );\n\n    // Clean up zip\n    await fs.unlink(zipPath).catch(() => {});\n\n    return {\n      siteId: siteId || '',\n      deployUrl: deployResponse.data.deploy_ssl_url || deployResponse.data.ssl_url || '',\n      siteUrl: deployResponse.data.ssl_url || '',\n    };\n  }\n\n  private async zipDirectory(sourceDir: string, outPath: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const output = createWriteStream(outPath);\n      const archive = archiver('zip', { zlib: { level: 9 } });\n\n      output.on('close', resolve);\n      archive.on('error', reject);\n\n      archive.pipe(output);\n      archive.directory(sourceDir, false);\n      archive.finalize();\n    });\n  }\n}\n\nexport const netlifyDeploy = new NetlifyDeploy();\n","size_bytes":2272},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { dbStorage } from './db-storage';\n\n// Add user to request\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        email: string;\n        username: string;\n      };\n    }\n  }\n}\n\n// Simple auth middleware - checks for userId in session\nexport async function requireAuth(req: Request, res: Response, next: NextFunction) {\n  const userId = req.session.userId;\n  \n  if (!userId) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n\n  const user = await dbStorage.getUser(userId);\n  if (!user) {\n    return res.status(401).json({ error: 'User not found' });\n  }\n\n  req.user = {\n    id: user.id,\n    email: user.email,\n    username: user.username,\n  };\n\n  next();\n}\n\n// Optional auth - sets user if authenticated but doesn't require it\nexport async function optionalAuth(req: Request, res: Response, next: NextFunction) {\n  const userId = req.session.userId;\n  \n  if (userId) {\n    const user = await dbStorage.getUser(userId);\n    if (user) {\n      req.user = {\n        id: user.id,\n        email: user.email,\n        username: user.username,\n      };\n    }\n  }\n\n  next();\n}\n","size_bytes":1200},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/neon-serverless';\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport * as schema from '@shared/schema';\nimport ws from 'ws';\n\n// Configure Neon to use WebSocket for serverless compatibility\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL is not set');\n}\n\n// Create connection pool\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\n// Create Drizzle instance\nexport const db = drizzle(pool, { schema });\n","size_bytes":535},"server/db-storage.ts":{"content":"import { eq, and } from 'drizzle-orm';\nimport { db } from './db';\nimport {\n  users,\n  projects,\n  files,\n  sandboxes,\n  aiInteractions,\n  deployments,\n  type User,\n  type InsertUser,\n  type Project,\n  type InsertProject,\n  type File,\n  type InsertFile,\n  type Sandbox,\n  type InsertSandbox,\n  type AiInteraction,\n  type InsertAiInteraction,\n  type Deployment,\n  type InsertDeployment,\n} from '@shared/schema';\nimport type { IStorage } from './storage';\n\nexport class DbStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // Projects\n  async getProject(id: string): Promise<Project | undefined> {\n    const result = await db.select().from(projects).where(eq(projects.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getProjectsByUserId(userId: string): Promise<Project[]> {\n    return db.select().from(projects).where(eq(projects.userId, userId));\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const result = await db.insert(projects).values(insertProject).returning();\n    return result[0];\n  }\n\n  async updateProject(id: string, data: Partial<Project>): Promise<Project> {\n    const result = await db\n      .update(projects)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    \n    if (!result[0]) throw new Error('Project not found');\n    return result[0];\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    await db.delete(projects).where(eq(projects.id, id));\n  }\n\n  // Files\n  async getFile(id: string): Promise<File | undefined> {\n    const result = await db.select().from(files).where(eq(files.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getFilesByProjectId(projectId: string): Promise<File[]> {\n    return db.select().from(files).where(eq(files.projectId, projectId));\n  }\n\n  async getFileByPath(projectId: string, path: string): Promise<File | undefined> {\n    const result = await db\n      .select()\n      .from(files)\n      .where(and(eq(files.projectId, projectId), eq(files.path, path)))\n      .limit(1);\n    return result[0];\n  }\n\n  async createFile(insertFile: InsertFile): Promise<File> {\n    const result = await db.insert(files).values(insertFile).returning();\n    return result[0];\n  }\n\n  async updateFile(id: string, content: string): Promise<File> {\n    const result = await db\n      .update(files)\n      .set({ content, updatedAt: new Date() })\n      .where(eq(files.id, id))\n      .returning();\n    \n    if (!result[0]) throw new Error('File not found');\n    return result[0];\n  }\n\n  async updateFileByPath(projectId: string, path: string, content: string): Promise<File> {\n    const result = await db\n      .update(files)\n      .set({ content, updatedAt: new Date() })\n      .where(and(eq(files.projectId, projectId), eq(files.path, path)))\n      .returning();\n    \n    if (!result[0]) throw new Error('File not found');\n    return result[0];\n  }\n\n  async deleteFile(id: string): Promise<void> {\n    await db.delete(files).where(eq(files.id, id));\n  }\n\n  async deleteFileByPath(projectId: string, path: string): Promise<void> {\n    await db.delete(files).where(and(eq(files.projectId, projectId), eq(files.path, path)));\n  }\n\n  // Sandboxes\n  async getSandbox(id: string): Promise<Sandbox | undefined> {\n    const result = await db.select().from(sandboxes).where(eq(sandboxes.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getSandboxByProjectId(projectId: string): Promise<Sandbox | undefined> {\n    const result = await db\n      .select()\n      .from(sandboxes)\n      .where(eq(sandboxes.projectId, projectId))\n      .limit(1);\n    return result[0];\n  }\n\n  async getSandboxByUserId(userId: string): Promise<Sandbox | undefined> {\n    const result = await db\n      .select()\n      .from(sandboxes)\n      .where(eq(sandboxes.userId, userId))\n      .limit(1);\n    return result[0];\n  }\n\n  async createSandbox(insertSandbox: InsertSandbox): Promise<Sandbox> {\n    const result = await db.insert(sandboxes).values(insertSandbox).returning();\n    return result[0];\n  }\n\n  async updateSandbox(id: string, data: Partial<Sandbox>): Promise<Sandbox> {\n    const result = await db\n      .update(sandboxes)\n      .set(data)\n      .where(eq(sandboxes.id, id))\n      .returning();\n    \n    if (!result[0]) throw new Error('Sandbox not found');\n    return result[0];\n  }\n\n  async deleteSandbox(id: string): Promise<void> {\n    await db.delete(sandboxes).where(eq(sandboxes.id, id));\n  }\n\n  async getAllSandboxes(): Promise<Sandbox[]> {\n    return db.select().from(sandboxes);\n  }\n\n  // AI Interactions\n  async createAiInteraction(insertInteraction: InsertAiInteraction): Promise<AiInteraction> {\n    const result = await db.insert(aiInteractions).values(insertInteraction).returning();\n    return result[0];\n  }\n\n  async getAiInteractionsByProjectId(projectId: string): Promise<AiInteraction[]> {\n    return db.select().from(aiInteractions).where(eq(aiInteractions.projectId, projectId));\n  }\n\n  // Deployments\n  async createDeployment(insertDeployment: InsertDeployment): Promise<Deployment> {\n    const result = await db.insert(deployments).values(insertDeployment).returning();\n    return result[0];\n  }\n\n  async getDeploymentsByProjectId(projectId: string): Promise<Deployment[]> {\n    return db\n      .select()\n      .from(deployments)\n      .where(eq(deployments.projectId, projectId))\n      .orderBy(deployments.createdAt);\n  }\n\n  async getDeployment(id: string): Promise<Deployment | null> {\n    const result = await db.select().from(deployments).where(eq(deployments.id, id));\n    return result[0] || null;\n  }\n\n  async updateDeployment(id: string, data: Partial<Deployment>): Promise<Deployment> {\n    const result = await db\n      .update(deployments)\n      .set(data)\n      .where(eq(deployments.id, id))\n      .returning();\n    \n    if (!result[0]) throw new Error('Deployment not found');\n    return result[0];\n  }\n}\n\nexport const dbStorage = new DbStorage();\n","size_bytes":6405},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst signupSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<\"login\" | \"signup\">(\"login\");\n\n  const loginForm = useForm({\n    resolver: zodResolver(loginSchema),\n    defaultValues: { email: \"\", password: \"\" },\n  });\n\n  const signupForm = useForm({\n    resolver: zodResolver(signupSchema),\n    defaultValues: { email: \"\", username: \"\", password: \"\" },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: (data: z.infer<typeof loginSchema>) => apiRequest(\"POST\", \"/api/auth/login\", data),\n    onSuccess: () => {\n      toast({ title: \"Welcome back!\" });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({ title: \"Login failed\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: (data: z.infer<typeof signupSchema>) => apiRequest(\"POST\", \"/api/auth/signup\", data),\n    onSuccess: () => {\n      toast({ title: \"Account created!\" });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({ title: \"Signup failed\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-background\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>Web IDE</CardTitle>\n          <CardDescription>Sign in or create an account to get started</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as \"login\" | \"signup\")}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n              <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Sign Up</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Form {...loginForm}>\n                <form onSubmit={loginForm.handleSubmit((data) => loginMutation.mutate(data))} className=\"space-y-4\">\n                  <FormField\n                    control={loginForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"you@example.com\" data-testid=\"input-login-email\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={loginForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <Input type=\"password\" placeholder=\"••••••••\" data-testid=\"input-login-password\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={loginMutation.isPending} data-testid=\"button-login\">\n                    {loginMutation.isPending ? \"Logging in...\" : \"Login\"}\n                  </Button>\n                </form>\n              </Form>\n            </TabsContent>\n\n            <TabsContent value=\"signup\">\n              <Form {...signupForm}>\n                <form onSubmit={signupForm.handleSubmit((data) => signupMutation.mutate(data))} className=\"space-y-4\">\n                  <FormField\n                    control={signupForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"you@example.com\" data-testid=\"input-signup-email\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={signupForm.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"johndoe\" data-testid=\"input-signup-username\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={signupForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <Input type=\"password\" placeholder=\"••••••••\" data-testid=\"input-signup-password\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={signupMutation.isPending} data-testid=\"button-signup\">\n                    {signupMutation.isPending ? \"Creating account...\" : \"Sign Up\"}\n                  </Button>\n                </form>\n              </Form>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6881},"server/session.d.ts":{"content":"import 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n  }\n}\n","size_bytes":115}},"version":2}